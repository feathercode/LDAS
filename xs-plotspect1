#!/bin/bash
# <TAGS> programming LDAS</TAGS>

################################################################################
# INTIAL VARIABLE DEFINITIONS
################################################################################
thisprog=`basename "$0"`
tempfile="temp_"$thisprog"_"$$
progpath=$(dirname $(readlink -f "$0"))
startdir=$(pwd)
progbase1=$(echo $thisprog | awk -F - '{print toupper($NF)}')
allopts=$@
start_time=$(date +'%s.%3N')
setverb="0"
setclean="1"
# colours for use with text printed to terminal
RED='\033[0;31m'	# for errors
PURPLE='\033[0;35m'	# for warnings
GREEN='\033[0;32m'	# for interactive text requiring input
NC='\033[0m' 		# to revert to default text colour


setxcol="freq"
setycol="amp"
setsubj="subj"
setgrp="grp"

################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": Plot average power spectra data from subjects,groups"
	echo "USAGE: $thisprog [in] [x] [y] [s] [g] [options]"
	echo "	[in]: input file, format= <time> <data>"
	echo "	[x]: column holding x-variable (typically freq or time)"
	echo "	[y]: column holding y-variable (typically amp or pow)"
	echo "	[s]: column holding subject identifier"
	echo "	[g]: column holding group identifier"
	echo "VALID OPTIONS (defaults in []):"
	echo "	-x: x-axis column [$setverb]"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo "EXAMPLE: "
	echo "	"$thisprog" data.txt  2>&1|tee log"$thisprog".txt"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

########################################################################################
# INPUT FILE(S) AND ARGUMENT HANDLING
########################################################################################
setinfile=$1 ; shift
setxcol=$1 ; shift
setycol=$1 ; shift
setscol=$1 ; shift
setgcol=$1 ; shift
if [ ! -e "$setinfile" ] ; then { echo -e "\n--- Error ["$thisprog"]: missing file $setinfile\n" ;  exit; } ; fi
if [ ! -s "$setinfile" ] ; then { echo -e "\n--- Error ["$thisprog"]: $setinfile is empty\n" ;  exit; } ; fi

# OPTIONAL ARGUMENT HANDLING
vs="v:c:" ; vl="verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo -e "\n--- Error ["$thisprog"]"$y"\n" >&2 ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$progbase1" != "" ] ; then rm -f $progbase1* ; fi
fi

################################################################################
# START THE JOB
################################################################################
out1="out_"$thisprog"_norm"
plotopts="-cg 1 -cx 2 -cy 4 -ce 6 -line 1 -ps 0 -xscale .7 -yscale .4 -legend 2 -ew 0 -xint 10 -vline 4,12,30,100 -lwa .5 -xpad 0 -xmax 120"
xl="Frequency (Hz)"

xe-cut1 $setinfile $setscol,$setgcol,$setxcol,$setycol > $tempfile".0"
# ??? inset check for all columns being found, because xe-cut won't complain

echo " ??? IN PROGRESS ???"

xe-norm2 $tempfile".0" -cy 4 -n -1 |
	xe-statsgrp2 stdin -cg1 2 -cg2 3 -cy 4 |
	xe-plottable1 stdin $plotopts -ylabel "Amplitude (uV)" -out $tempfile".1.ps"
xs-plotmod1 $tempfile".1.ps" --out 1 --legend table_groupnames.txt

xe-cut1 $tempfile".0" sub,freq,grp,amp |
	sort -k1n -k2n -k3n |
	xe-repeated1 stdin sub,freq grp amp -norm 4 -n1 0 -n2 0 |
	xe-statsgrp2 stdin -cg1 3 -cg2 2 -cy 4 > $out1

xe-plottable1 $out1 $plotopts -xlabel "$xl" -ylabel "Amplitude ratio (vs. Vehicle)" -legend 0 -out $tempfile".2.ps"
xe-plotmerge1 $tempfile".1.ps" $tempfile".2.ps" -xmax 1 -yinc 250 -yo 600 -out "plot_spect0.ps"

# per animal spectra, one group
xe-dbmatch1 temp_XTP-EEG1.spect0 grp 1 |
 	xe-plottable1 stdin -cg 1 -cx 3 -cy 4 -line 1 -ps 0 -lb 2 -xscale .7 -legend 2 -ymax 60 -xint 10 -vline 4,12,30,100




################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi
exit
