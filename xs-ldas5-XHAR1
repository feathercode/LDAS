
#!/bin/bash
# <TAGS>taini signal_processing spectra</TAGS>

# for most scripts...
thisprog=`basename "$0"`
progbase1=$(echo $thisprog | awk -F - '{print toupper($NF)}')
allopts=$@

tempfile="temp_"$thisprog #"."$$"."
startdir=$(pwd)
start_time=$(date +'%s.%3N')
date0=$(date)

settrials="all"
setadjust=""
setalign="stop"
setpre="-60"
setpost="60"
settimeout="30"
setplot="1"
setverb="0"
setclean="1"

# variables which are not actually options yet
setclip="3"
setfhi="0.000"

# set up the bands
nbands=6
for band in $(seq 1 $nbands) ; do setband[$band]="" ; done
i=1 ; fname[$i]="delta" ; fa[$i]=".5"  ; fz[$i]="4"
i=2 ; fname[$i]="alpha" ; fa[$i]="4" ; fz[$i]="6"
i=3 ; fname[$i]="theta" ; fa[$i]="6"   ; fz[$i]="12"
i=4 ; fname[$i]="beta"  ; fa[$i]="12"  ; fz[$i]="30"
i=5 ; fname[$i]="gamma" ; fa[$i]="30"  ; fz[$i]="100"
i=6 ; fname[$i]="hfo"   ; fa[$i]="120" ; fz[$i]="150"

################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": analyze Hargreaves task behaviour and ephys data"
	echo "ANALYSES:"
	echo "	- behavioural latencies"
	echo "		- looks for TRIAL \"latency\" column in the .notes file"
	echo "		- if present, this is used to re-define \"start\" for each trial"
	echo "		- if latency >= timeout ($settimeout seconds), trial is excluded"
	echo "USAGE: $thisprog [base] [options]"
	echo "	[base]: [yyyymmdd]-[session]_[subject]"
	echo "GENERAL OPTIONS..."
	echo "	--timeout: time (seconds) at which trials stop automatically [$settimeout]"
	echo "	--plot: generate plots (0=NO,2=YES) [$setplot]"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo "OPTIONS FOR xs-ldas-pow1/coh1 FOR ALTERING START-STOP PAIRS:"
	echo "	--trials: CSV list of trial-names to use (or \"all\" or \"no\") [$settrials]"
	echo "	--adj: adjust trial duration using seconds in a named TRIALS column [$setadj]"
	echo "		\"-\" prefix resets start relative to stop"
	echo "		\"+\" prefix resets stop relative to start"
	echo "		- Hargreaves task stop-signals (paw-withdrawal) are accurate"
	echo "		- however the trial start-syncs may preceed the lamp-activation"
	echo "		- e.g. --adj -latency : start=(stop-latency*samplerate)"
	echo "	--align: redefine start & stop as one or the other (start|stop) [$setalign]"
	echo "		NOTE: if set, use --pre or --post to make non-zero-length trials"
	echo "	--pre: seconds to add to start [$setpre]"
	echo "	--post: seconds to add to stop [$setpost]"
	echo "	--fhi: high-freq. cut (smooth) for power-timecourse (0=NONE) [$setfhi])"
	echo "BAND OVERRIDE OPTIONS - specify comma-separated start-stop pairs..."
	for band in $(seq 1 $nbands) ; do
		echo "	--${fname[$band]}: [${fa[$band]},${fz[$band]}]"
	done
	echo "EXAMPLE: "
	echo "	$thisprog 20181231-000_12345 2>&1 | tee log_"$thisprog".txt"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

########################################################################################
# ARGUMENT HANDLING
########################################################################################
# required arguments
setbase=$1 ; shift
filenotes=$setbase".notes"
filedat=$setbase".dat"
# check notes file exists & isn't empty
if [ ! -e $filenotes ] ; then {  echo -e "\n--- Error ["$thisprog"]: missing file $filenotes\n" ; exit ;  } ; fi
if [ ! -s $filenotes ] ; then {  echo -e "\n--- Error ["$thisprog"]: $filenotes is empty\n" ; exit ;  } ; fi
# optional arguments
vs="v:c:" ; vl="trials:,adj:,align:,pre:,post:,fhi:,delta:,alpha:,theta:,beta:,gamma:,hfo:,timeout:,plot:,verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo "" ; echo "--- Error ["$thisprog"]"$y ; echo ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	# do band detection
	for band in $(seq 1 $nbands) ; do if [ "$1" == "--"${fname[$band]} ] ; then { setband[$band]=$2 ; shift ; } fi ; done
	# do the rest
	case $1 in
		--trials ) settrials=$2 ; shift ;;
		--adj ) setadjust=$2 ; shift ;;
		--align ) setalign=$2 ; shift ;;
		--pre ) setpre=$2 ; shift ;;
		--post ) setpost=$2 ; shift ;;
		--fhi ) setfhi=$2 ; shift ;;
		--timeout ) settimeout=$2 ; shift ;;
		--plot ) setplot=$2 ; shift ;;
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setalign" != "" ] && [ "$setalign" != "start" ] && [ "$setalign" != "stop" ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --align ($setalign) -  must be unset, \"start\" or \"stop\"\n" ; exit ;  } ; fi
if [ "$setplot" != "0" ] && [ "$setplot" != "1" ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --plot ($setplot) -  must be 0 or 1\n" ; exit ;  } ; fi
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" ; exit ;  } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ; exit ;  } ; fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$progbase1" != "" ] ; then rm -f $progbase1* ; fi
fi


echo "--------------------------------------------------------------------------------"
echo $thisprog $allopts
echo "--------------------------------------------------------------------------------"

################################################################################
# GET PARAMETERS FROM NOTES FILE
################################################################################
sf=$(xe-getkey $filenotes sample_rate=)
bindec=$(xe-getkey $filenotes bin_decimation=)
binrate=$(xe-getkey $filenotes bin_sample_rate=)
if [ -z "$sf" ] ; then {  echo -e "\n--- Error ["$thisprog"]: no definition of sample_rate in $filenotes" ; echo ; exit ; } fi
if [ -z "$bindec" ] ; then {  echo -e "\n--- Error ["$thisprog"]: no definition of bin-decimation in $filenotes" ; echo ; exit ; } fi
if [ -z "$binrate" ] ; then {  echo -e "\n--- Error ["$thisprog"]: no definition of bin_sample_rate in $filenotes" ; echo ; exit ; } fi
let z=$(xe-strxmlparse1 $filenotes TRIALS | wc -l)
if [ $z -eq 0 ] ; then {
	echo
	echo "--- Error ["$thisprog"]: no TRIALS in $filenotes"
	echo "	- have you run the appropriate xs-TAINI-[experiment] preprocessing?"
	echo
	exit
} fi


################################################################################
# SET BAND OVERRIDE PARAMETERS
################################################################################
optbands=""
for band in $(seq 1 $nbands) ; do
	if [ "${setband[$band]}" != "" ] ; then
		n=${fname[$band]}
		a=$(echo ${setband[$band]} | xe-cut1 stdin 1 -n 1 -d ",")
		b=$(echo ${setband[$band]} | xe-cut1 stdin 2 -n 1 -d ",")
		if [ "$a" == "" ] || [ "$b" == "" ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --$n (${setband[$band]}) is not a comma-separated pair\n" ; exit ;  } ; fi
		let z=$(echo "$a<$b"|bc)
		if [ $z -eq 0 ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --$n (${setband[$band]}) - 1st value >= 2nd\n" ; exit ;  } ; fi
		fa[$band]=$a
		fz[$band]=$b
	fi
	z="--"${fname[$band]}" "${fa[$band]}","${fz[$band]}
	optbands=$optbands" "$z
done

################################################################################
# BUILD LIST OF TRIALS AND SSP-FILE
# - $listtrials1 : CSV trialname-list: passing timeout criterion
# - NOTE that we do not apply --align --pre --post here
# 	- that's done by xs-ldas-pow1 and xs-ldas-coh1
################################################################################
if [ "$setverb" == "1" ] ; then echo "...original trials..." ;  xs-ldas-gettrials2 $filenotes ; fi

echo -e "\n-------------------------------------------------------------------------------"
echo "BEHAVIOURAL ANALYSIS - on trials < $settimeout seconds"
out1=$progbase1"_BEHAV_summary.txt"

if [ "$settrials" != "no" ] ; then

	listtrials1=$(xs-ldas-gettrials2 $filenotes -n $settrials | xe-cut1 stdin name,seconds,latency -o 1 -d '\t' | awk 'BEGIN{t='$settimeout'}{if(($2>0&&$2<t)||$3<t)print $1}' | paste -s | tr '\t' ',')
	let ntrials=$(echo $listtrials1 | tr ',' ' ' | wc -w)
	# save the behavioural results
	if [ $ntrials -gt 0 ] ; then
		xs-ldas-gettrials2 $filenotes -n $listtrials1 |
		xe-cut1 stdin name,seconds,latency -s 1 |
		xe-math_round2 stdin -b .001 -c 2 > $out1
		# determine whether there is ephys data to analyse - based on trial duration >0 and presence of .bin files
		let nephystrials=$(xs-ldas-gettrials2 $filenotes -n $listtrials1 | xe-cut1 stdin seconds -o 1 | awk '$1>0{print $1}' | wc -l)
	else
		echo -e "name\tseconds\tlatency" > $out1
		let nephystrials=0
	fi

else
	echo -e "name\tseconds\tlatency"  > $out1
	listtrials1="no"
	let ntrials=1
	let nephystrials=1
fi

if [ $ntrials -lt 1 ] ; then {  echo -e "--- Warning ["$thisprog"]: no TRIALS ($settrials) less than timeout ($settimeout seconds) in $filenotes" ; exit ; } fi
if [ $nephystrials -le 0 ] ; then { echo -e "--- Warning ["$thisprog"]: no good trials with valid ephys syncs $filenotes\n" ; exit ; } fi
if [ "$setverb" == "1" ] ; then echo "...trials meeting all criteria..." ; xs-ldas-gettrials2 $filenotes -n $listtrials1 ; fi

################################################################################
################################################################################
# ANALYSE THE DATA      ----------1-2------3------------ 1=start,2=heat,3=stop
################################################################################
################################################################################

echo -e "\n-------------------------------------------------------------------------------"
echo "SPECTRAL POWER ANALYSIS (good trials only)"
listplotfft=""
listsum1=""
listregions="FRO OCC SOM prefrontal amygdala.central insular.agranular" # EMG.L EMG.R
listheaderavg="freq "$listregions
listavg1=$tempfile"_avg_time.txt"
let count=0
for region in $listregions ; do
	progbase2=$progbase1"_POW_"$region"_"
	# BUILD LIST PART-1 - AVERAGE IS ALWAYS INCLUDED IN THE LIST SO XS-PASTE1 CAN INSERT COLUMNS AS NEEDE D
	listavg1=$listavg1" "$progbase2"avg.txt"
	# CHECK THAT BINFILE EXISTS AND CHANNEL IS VALID
	filebin=$(xe-dbmatch1 $filenotes region $region -xml CHANNELS -oc chan -o 1 | head -n 1 | awk '{printf("'$setbase'-%03d.bin",$1)}' )
	if [ ! -e $filebin ] ; then { echo -e "--- Warning ["$thisprog"]: missing .bin file '$filebin'" ; continue ; } fi
	# CHECK THAT THE CHANNEL IS GOOD - IF NOT, USE THE DUMMY OPTION FOR xs-ldas-pow1
	y=$(xe-dbmatch1 $filenotes region $region -xml CHANNELS -oc good -o 1 | head -n 1)
	if [ "$y" == "0" ] ; then dummy=1 ; else dummy=0 ; fi

	# CALCULATE POWER
	command="xs-ldas-pow1 $filenotes $region --trials $listtrials1 --align "$setalign" --pre $setpre --post $setpost --clip $setclip --nz 1 --ns 0 --np 50 --fhi $setfhi --norm -1 --plot $setplot $optbands --verb $setverb --dummy $dummy"
	echo $command
	$command

	# STORE THE AVG OUTPUT TIMESTAMPS - XS-PASTE1 MUST HAVE SINGLE-COLUMN FOR EACH PASTED FILE
	let count=$count+1
	if [ $count -eq 1 ] ; then xe-cut1 "output_xs-ldas-pow1_avg.txt" freq  > $tempfile"_avg_time.txt" ; fi
	# for all regions, also save the avg power to a new filename and remove orginal - don't want to rename afterwards
	xe-cut1 "output_xs-ldas-pow1_avg.txt" $region > $progbase2"avg.txt"
	rm -f   "output_xs-ldas-pow1_avg.txt"
	# RENAME THE REMAINING OUTPUT THAT WE WANT TO SAVE
	xs-rename "output_xs-ldas-pow1_" $progbase2 "output_xs-ldas-pow1_*" >/dev/null
	# BUILD LISTS (note that avg already included above)
	listsum1=$listsum1" "$progbase2"summary.txt"
	listplotfft=$listplotfft" "$progbase2"summary.ps"
	# CLEANUP
	if [ "$setclean" == "1" ] ; then
		rm -f $progbase2"fftparams.txt"
		rm -f $progbase2"fftparams.txt"
		rm -f $progbase2"avg.ps"
	fi
	echo
done
# MERGE THE RESULTS
if [ "$listsum1" != "" ] ; then
	# merge the FFT averages
	xs-paste1 "$listavg1" -h 1 -H "$listheaderavg" -p "-" > $progbase1"_POW_summary_avg.txt"
	# merge the summaries
	cat $listsum1 |
	awk 'BEGIN{n=0}{n++; if(n==1) print$0; else if($1!="chan") print $0}' > $progbase1"_POW_summary_bands.txt"
	# merge the summary plots
	if [ "$setplot" == "1" ] ; then xe-plotmerge2 $listplotfft > $progbase1"_POW_summary.ps" ; fi
else echo ""
fi
# cleanup
if [ "$setclean" == "1" ] ; then rm -f $listplotfft $listsum1 $listavg1 ; fi


echo -e "\n-------------------------------------------------------------------------------"
echo "SPECTRAL COHERENCE ANALYSIS"
listplotfft=""
listsum1=""
listavg1=""
listregions="prefrontal amygdala.central insular.agranular" # EMG.L EMG.R
listregionpairs=$(echo $listregions | tr ' ' ',' | xe-makepairs1 stdin)
listheaderavg="freq "$listregionpairs
listavg1=$tempfile"_avg_time.txt"
let count=0
for regionpair in $listregionpairs ; do
	region1=$(echo $regionpair | cut -f 1 -d ,)
	region2=$(echo $regionpair | cut -f 2 -d ,)
	progbase2=$progbase1"_COH_"$region1"_"$region2"_"
	# BUILD LIST PART-1 - AVERAGE IS ALWAYS INCLUDED IN THE LIST SO XS-PASTE1 CAN INSERT COLUMNS AS NEEDE D
	listavg1=$listavg1" "$progbase2"avg.txt"
	# CHECK THAT BINFILE EXISTS AND CHANNEL IS VALID
	filebin1=$(xe-dbmatch1 $filenotes region $region1 -xml CHANNELS -oc chan -o 1 | head -n 1 | awk '{printf("'$setbase'-%03d.bin",$1)}' )
	filebin2=$(xe-dbmatch1 $filenotes region $region2 -xml CHANNELS -oc chan -o 1 | head -n 1 | awk '{printf("'$setbase'-%03d.bin",$1)}' )
	if [ ! -e $filebin1 ] || [ ! -e $filebin2 ] ; then { echo -e "--- Warning ["$thisprog"]: missing .bin file '$filebin1' or '$filebin2'" ; continue ; } fi
	# CHECK THAT THE CHANNEL IS GOOD - IF NOT, USE THE DUMMY OPTION FOR xs-ldas-pow1
	x=$(xe-dbmatch1 $filenotes region $region1 -xml CHANNELS -oc good -o 1)
	y=$(xe-dbmatch1 $filenotes region $region2 -xml CHANNELS -oc good -o 1)
	if [ "$x" == "0" ] || [ "$y" == "0" ] ; then dummy=1 ; else dummy=0 ; fi

	# CALCULATE COHERENCE
	command="xs-ldas-coh1 $filenotes $region1 $region2 --trials $listtrials1 --align "$setalign" --pre $setpre --post $setpost --clip $setclip --nz 1 --ns 0 --np 50 --fhi $setfhi --norm -1 --plot $setplot $optbands --verb $setverb --dummy $dummy"
	echo $command
	$command

	# STORE THE AVG OUTPUT TIMESTAMPS - XS-PASTE1 MUST HAVE SINGLE-COLUMN FOR EACH PASTED FILE
	let count=$count+1
	if [ $count -eq 1 ] ; then xe-cut1 "output_xs-ldas-coh1_avg.txt" freq  > $tempfile"_avg_time.txt" ; fi
	# for all regions, also save the avg power to a new filename and remove orginal - don't want to rename afterwards
	xe-cut1 "output_xs-ldas-coh1_avg.txt" $region1"_"$region2 > $progbase2"avg.txt"
	rm -f   "output_xs-ldas-coh1_avg.txt"
	# RENAME THE REMAINING OUTPUT THAT WE WANT TO SAVE
	xs-rename "output_xs-ldas-coh1_" $progbase2 "output_xs-ldas-coh1_*" >/dev/null
	# BUILD LISTS
	listsum1=$listsum1" "$progbase2"summary.txt"
	listplotfft=$listplotfft" "$progbase2"summary.ps"
	# CLEANUP
	if [ "$setclean" == "1" ] ; then
		rm -f $progbase2"fftparams.txt"
		rm -f $progbase2"fftparams.txt"
		rm -f $progbase2"avg.ps"
	fi
	echo
done
# MERGE THE RESULTS
if [ "$listsum1" != "" ] ; then
	# merge the FFT averages
	xs-paste1 "$listavg1" -h 1 -H "$listheaderavg" -p "-" > $progbase1"_COH_summary_avg.txt"
	# merge the summaries
	cat $listsum1 |
	awk 'BEGIN{n=0}{n++; if(n==1) print$0; else if($1!="chan1") print $0}' > $progbase1"_COH_summary_bands.txt"
	# merge the summary plots
	if [ "$setplot" == "1" ] ; then xe-plotmerge2 $listplotfft > $progbase1"_COH_summary.ps" ; fi
fi
# cleanup
if [ "$setclean" == "1" ] ; then rm -f $listplotfft $listsum1 $listavg1 ; fi


################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi
exit
