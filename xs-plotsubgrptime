#!/bin/bash
# <TAGS>plot</TAGS>

thisprog=`basename "$0"`
allopts=$@
tempfile="temp_"$thisprog ;

setsubject="subject"
setgroup="setgroup"
setxlabel=""
settitle=""
setplotopts=""
setverb="0"
setclean="1"
setnorm="-1"

setout="plot_"$thisprog

if [ $# -lt 3 ]; then
	echo
	echo "----------------------------------------------------------------"
	echo $thisprog": plot time-series by subject/grp/mean"
	echo "- use to fully explore data by subject and by group"
	echo "- for each measure, shows three times-course plots"
	echo "	- subject (colour-coded by subject)"
	echo "	- subject (colour-coded by group)"
	echo "	- group means (colour-coded by group, with error-bars)"
	echo "- USAGE: "$thisprog" [infile] [time] [measures]"
	echo "- 	[infile]: data file"
	echo "- 	[time]: column holding the time-variable"
	echo "- 	[measures]: CSV list of measures to plot against time"
	echo "VALID OPTIONS (defaults in []):"
	echo "	--subject: column defining subject [$setsubject]"
	echo "	--group: column defining group [$setgroup]"
	echo "	--norm: by-time normalisation (see xe-normrow2) [$setnorm]"
	echo "	--xlabel: plot x-label [default= same as --time]"
	echo "	--title: top-of-page plot title [$settitle]"
	echo "	--plotopts: options to apply to all plots [$setplotopts]"
	echo "		- NOTE: general plot appearance options only"
	echo "	--out: output file name [$setout]"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo "OUTPUT:"
	echo "	- postscript plot: "$setout
	echo "----------------------------------------------------------------"
	echo
	exit
fi

########################################################################################
# REQUIRED ARGUMENT HANDLING
########################################################################################
infile=$1; shift
settime=$1 ; shift
setmeasures=$1 ; shift

# OPTIONAL ARGUMENT HANDLING
vs="s:b:v:c:" ; vl="norm:,xlabel:,title:,plotopts:,subject:,group:,out:,verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo -e "\n--- Error ["$thisprog"]"$y"\n" ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		--norm ) setnorm=$2 ; shift ;;
		--xlabel ) setxlabel=$2 ; shift ;;
		--title ) settitle=$2 ; shift ;;
		--plotopts ) setplotopts=$2 ; shift ;;
		--subject ) setsubject=$2 ; shift ;;
		--group ) setgroup=$2 ; shift ;;
		--out ) setout=$2 ; shift ;;
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi

################################################################################
# GENERATE THE PLOTS
################################################################################
firstmeasure=$(echo $setmeasures | awk -F , '{print $1}')
lastmeasure=$(echo $setmeasures | awk -F , '{print $NF}')

plotlist1=""
for measure in $(echo $setmeasures | tr ',' ' ') ; do

	if [ "$setverb" == "1" ] ; then echo "	measure: $measure" ; fi

	if [ $measure == "$firstmeasure" ] ; then title="$settitle" ; else title="" ; fi
	if [ $measure == "$lastmeasure" ] ; then legend="1" ; else legend="0" ; fi
	plotopts0="-cg 1 -cx 2 -cy 3 -lb 2"
	plotopts1="-line 1 -ew 0 -xscale .2 -yscale .2 -legend $legend"

	if [ "$setxlabel" != "" ] ; then xl=$setxlabel; else xl="$settime" ; fi
	yl="$measure"
	xe-cut1 $infile subject,group,$settime,$measure -o 1 |
	xe-statsgrp3 stdin |
	xe-norm3 stdin -head 1 -id1 1 -id2 2 -rep 3 -val 5 -norm $setnorm |
	sort -k1,1n -k3,3n > $tempfile

	plotfile1=$tempfile"_"$measure"_sub.ps"
	plotlist1=$plotlist1" "$plotfile1
	xe-cut1 $tempfile grp1,grp3,mean -o 1 |
	xe-plottable1 stdin $plotopts1 $setplotopts $plotopts0 -xlabel "$xl" -ylabel "$yl x subj." -title "$title" -out $plotfile1

	plotfile1=$tempfile"_"$measure"_grp.ps"
	plotlist1=$plotlist1" "$plotfile1
	xe-cut1 $tempfile grp2,grp3,mean -o 1 |
		xe-plottable1 stdin $plotopts1 $setplotopts $plotopts0 -xlabel "$xl" -ylabel "$yl x grp." -out $plotfile1
	if [ $measure == "$lastmeasure" ] ; then xs-plotmod1 $plotfile1 --legend "table_groupnames.txt" --out 1 ; fi

	plotfile1=$tempfile"_"$measure"_grpmean.ps"
	plotlist1=$plotlist1" "$plotfile1
	xe-cut1 $tempfile grp2,grp3,mean |
	xe-statsgrp2 stdin |
	xe-cut1 stdin grp1,grp2,mean,sem |
	xe-plottable1 stdin $plotopts1 $setplotopts $plotopts0 -ce 4 -xlabel "$xl" -ylabel "$yl (mean)" -out $plotfile1
	if [ $measure == "$lastmeasure" ] ; then xs-plotmod1 $plotfile1 --legend "table_groupnames.txt" --out 1 ; fi

done # end of measure loop

# MERGE PLOTS AND RENAME
xe-plotmerge1 $plotlist1 -xo 100 -xmax 3 -xinc 175 -yinc 150 -out $setout

if [ "$setverb" == "1" ] ; then echo "	output sent to $setout.001.ps" ; fi 

################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$plotlist1" != "" ] ; then rm -f $plotlist1 ; fi

fi
exit
