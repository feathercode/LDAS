#!/bin/bash
# <TAGS> programming LDAS</TAGS>

################################################################################
# INTIAL VARIABLE DEFINITIONS
################################################################################
thisprog=`basename "$0"`
tempfile="temp_"$thisprog #"_"$$
progpath=$(dirname $(readlink -f "$0"))
startdir=$(pwd)
progbase1=$(echo $thisprog | awk -F - '{print toupper($NF)}')
allopts=$@
start_time=$(date +'%s.%3N')
setverb="0"
setclean="1"
# colours for use with text printed to terminal
RED='\033[0;31m'	# for errors
PURPLE='\033[0;35m'	# for warnings
GREEN='\033[0;32m'	# for interactive text requiring input
NC='\033[0m' 		# to revert to default text colour


setxcol="freq"
setycol="amp"
setsubj="subj"
setgrp="grp"
setout="plot_"$thisprog".ps"
settable=""

################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 5 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": Plot average power spectra data from subjects,groups"
	echo "- plots mean spectra for treatment groups and individual subjects"
	echo "- also plots spectral change relative to a control group"
	echo "	- assumes the control group is the lowest, numerically (typically 0)"
	echo "USAGE: $thisprog [in] [x] [y] [s] [g] [options]"
	echo "	[in]: a file with columns defining subject, group, frequency, & amplitude"
	echo "	[x]: column holding x-variable (typically freq or time)"
	echo "	[y]: column holding y-variable (typically amp or pow)"
	echo "	[s]: column holding subject identifier"
	echo "	[g]: column holding group identifier"
	echo "VALID OPTIONS (defaults in []):"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo "	--table: text file with columns defining <group> and <name> [$settable]"
	echo "		- this is used to replace group-numbers with labels in plots"
	echo "	--out: output file name [$setout]"
	echo "	-A: top-plot options, in quotes [$setA]"
	echo "	-B: bottom-plot options, in quotes [$setB]"
	echo "EXAMPLE: "
	echo "	"$thisprog" eeg.txt freq amp sub grp -A \"-ymin .5 -ymax 1.5\""
	echo "OUTPUT: a multi-page postscript file"
	echo "	- $setout"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

########################################################################################
# INPUT FILE(S) AND ARGUMENT HANDLING
########################################################################################
setinfile=$1 ; shift
setxcol=$1 ; shift
setycol=$1 ; shift
setscol=$1 ; shift
setgcol=$1 ; shift
if [ ! -e "$setinfile" ] ; then { echo -e "\n--- Error ["$thisprog"]: missing file $setinfile\n" ;  exit; } ; fi
if [ ! -s "$setinfile" ] ; then { echo -e "\n--- Error ["$thisprog"]: $setinfile is empty\n" ;  exit; } ; fi

# OPTIONAL ARGUMENT HANDLING
vs="v:c:A:B:" ; vl="verb:,clean:,table:,out:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo -e "\n--- Error ["$thisprog"]"$y"\n" >&2 ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		--table ) settable=$2 ; shift ;;
		--out ) setout=$2 ; shift ;;
		-A ) setA=$2 ; shift ;;
		-B ) setB=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$settable" != "" ] ; then
	if [ ! -e "$settable" ] ; then { echo -e "\n--- Error ["$thisprog"]: missing file $settable\n" ;  exit; } ; fi
	if [ ! -s "$settable" ] ; then { echo -e "\n--- Error ["$thisprog"]: $settable is empty\n" ;  exit; } ; fi
fi

if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$progbase1" != "" ] ; then rm -f $progbase1* ; fi
fi

################################################################################
# START THE JOB
################################################################################
out1="out_"$thisprog"_norm"
plotopts="-cg 1 -cx 2 -cy 4 -ce 6 -line 1 -ps 0 -xscale .85 -yscale .4 -legend 0 -ew 0 -xint 10 -vline 4,12,30,100 -lwa .5 -xpad 0 -ypad 0"
mergeopts="-xmax 1 -yinc 260 -xo 70 -yo 580"
xl="$setxcol (Hz)"
yl="$setycol"
title="$setinfile"

xe-cut1 $setinfile $setscol,$setgcol,$setxcol,$setycol > $tempfile".0"
if [ $(head -n 1 $tempfile".0" | wc -w) -lt 4 ] ; then { echo -e "\n--- Error ["$thisprog"]: not all specified columns found in $setinfile\n" ;  exit; } ; fi

listgroups=$(tail -n +2 $tempfile".0" | cut -f 2 | sort -nu)

# define reference group as the first group in the numerically sorted list (usually zero)
refgroup=$(echo $listgroups | awk '{print $1}')
# define the reference group-name
if [ "$settable" != "" ] ; then	refgroupname=$(xe-dbmatch1 $settable group $refgroup -oc name -o 1) ; else refgroupname="Group_"$refgroup ; fi

################################################################################
# MAKE THE FRONT-PAGE PLOT: SPECTRUM BY GROUP, RAW AND NORMALISED
################################################################################
# regular plot-by-group
xe-norm2 $tempfile".0" -cy 4 -n -1 | # keep the option for log10 transform
	xe-statsgrp2 stdin -cg1 2 -cg2 3 -cy 4 |
	xe-plottable1 stdin $plotopts -xlabel "$xl" -ylabel "Mean $yl" -title "$title" $setA -out $tempfile"_a.ps"

# plot normalised to the control group
xe-cut1 $tempfile".0" $setscol,$setxcol,$setgcol,$setycol |
	sort -k1n -k2n -k3n |
	xe-repeated1 stdin $setscol,$setxcol $setgcol $setycol -norm 4 -n1 0 -n2 0 |
	xe-statsgrp2 stdin -cg1 3 -cg2 2 -cy 4 |
	xe-plottable1 stdin $plotopts -xlabel "$xl" -ylabel "Mean $yl (ratio)" -title "Normalised to $refgroupname" -legend 1 -hline 1 $setB -out $tempfile"_b.ps"
if [ "$settable" != "" ] ; then
	xs-plotmod1 $tempfile"_b.ps" --out 1 --legend $settable
fi

let count=0
plotlist=""
plotfile=$tempfile"_"$count
plotlist=$plotlist" "$plotfile".001.ps"
xe-plotmerge1 $tempfile"_a.ps" $tempfile"_b.ps" $mergeopts -out $plotfile

yl="$setycol"


for group in $listgroups ; do

	let count=$count+1
	plotfile=$tempfile"_"$count
	plotlist=$plotlist" "$plotfile".001.ps"
	if [ "$settable" != "" ] ; then	groupname=$(xe-dbmatch1 $settable group $group -oc name -o 1) ; else groupname="Group_"$group ; fi

	xe-dbmatch1 $tempfile".0" $setgcol $group |
	xe-statsgrp2 stdin -cg1 1 -cg2 3 -cy 4 |
	xe-plottable1 stdin $plotopts -xlabel "$xl" -ylabel "$yl" -title "$title :  $groupname" -ce -1 -legend 2 $setA -out $tempfile"_a.ps"

	xe-cut1 $tempfile".0" $setscol,$setxcol,$setgcol,$setycol |
	xe-dbmatch1 stdin $setgcol $refgroup,$group |
	sort -k1n -k2n -k3n |
	xe-repeated1 stdin $setscol,$setxcol $setgcol $setycol -norm 4 -n1 0 -n2 0 |
	xe-statsgrp2 stdin -cg1 1 -cg2 2 -cy 4 |
	xe-plottable1 stdin $plotopts -xlabel "$xl" -ylabel "$yl (ratio)" -title "Normalised to $refgroupname" -ce -1 -legend 0 -hline 1 $setB -out $tempfile"_b.ps"

	xe-plotmerge1 $tempfile"_a.ps" $tempfile"_b.ps" $mergeopts -out $plotfile
done

xe-plotmerge2 $plotlist > $setout
echo -e "\n- ouput sent to $setout \n"

################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi
exit
