#!/bin/bash
# <TAGS>TAINI electrophysiology</TAGS>


################################################################################
# TO DO: ??? SEE "LEGACY CODE FROM xs_TAINI-tools" at BOTTOM OF THIS FILE
################################################################################


thisprog=`basename "$0"`
allopts=$@
tempfile="temp_"$thisprog #"."$$"."
startdir=$(pwd)
start_time=$(date +'%s.%3N')
date0=$(date)

setsf="19531.25"
setbatch=""
setverb="0"
setclean="1"
setnchans="16"
setdestbase="../../Data_Library/"

################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": extract HARGREAVES trial-records from acquisition PLAN file"
	echo " - trial start-stop pairs are inserted into the .notes file for each subject"
	echo "USAGE: $thisprog [plan] [options]"
	echo "	[plan]: a file defining how the eperiment was run"
	echo "		- defines date= and experiment= "
	echo "		- <MAPPING> section summarizes session, subject and trial"
	echo "		- <TRIALS> section describes individual trials"
	echo "VALID OPTIONS (defaults in []):"
	echo "	--batch: batch-run on this CSV list of directories [$setbatch]"
	echo "		NOTE: use \"*.plan\" as the plan name - the quotes matter!"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo "EXAMPLE: "
	echo "	"$thisprog" PLAN.txt  2>&1|tee log_$thisprog.txt"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi


echo "################################################################################"
echo $thisprog "$allopts"
date
echo "################################################################################"


################################################################################
# ARGUMENT HANDLING
# - don't check for file presence until after we confirm this is not a batch job
################################################################################
fileplan=$1 ; shift

########################################################################################
# OPTIONAL ARGUMENT HANDLING
########################################################################################
vs="v:c:" ; vl="batch:,verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo "" ; echo "--- Error ["$thisprog"]"$y ; echo ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		--batch ) setbatch=$2 ; shift ;;
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" ; exit; } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ; exit; } ; fi

if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$progbase1" != "" ] ; then rm -f $progbase1* ; fi
fi

if [ $setverb == 1 ] ; then
	echo "--------------------------------------------------------------------------------"
	echo $thisprog "$allopts"
	echo
fi


################################################################################
# IS THIS ACTUALLY A BATCH JOB?
# - if so, make recursive calls to this script, omitting --batch arguments
################################################################################
if [ "$setbatch" != "" ] ; then
	list=$(echo $setbatch | tr ',' ' ') # convert from CSV to whitespace-delimited list
	z=2; # define the starting-field for options - ie. exclude required arguments
	opts=$(echo $allopts|awk '{for(i='$z';i<=NF;i++){if($i=="--batch"){i++;continue};a=a" "$i}}END{print a}') # build options excluding --batch
	cd $startdir # confirm start in the start directory
	for dir in $list ; do # for each batch-directory...
		if [ -d "$dir" ]; then
			cd $dir
			if [ "$setverb" != "0" ] ; then echo -e "\n$dir\n" ; fi
			$thisprog $fileplan $opts 2>&1| tee "log_"$thisprog".txt"
			cd $startdir
		else
			{ echo -e "\n--- Error ["$thisprog"]: missing directory $dir\n" ;  exit; } ;
		fi
	done
	exit # DO NOT DO ANYTHING ELSE!
fi


################################################################################
# CHECK PRESENCE OF PLAN FILE
################################################################################
if [ ! -e $fileplan ] ; then { echo -e "\n--- Error ["$thisprog"]: missing PLAN-file $fileplan\n" ; exit; } ; fi
if [ ! -s $fileplan ] ; then { echo -e "\n--- Error ["$thisprog"]: empty PLAN-file $fileplan\n" ; exit; } ; fi

################################################################################
# CHECK AND PROCESS THE PLAN FILE
# - these are essentially the same checks run by xs-TAINI-preproc1
################################################################################
echo "PROCESSING PLAN FILE $fileplan ..."
if [ "$(dos2unix -q < $fileplan | cmp -s - $fileplan)" ] ; then dos2unix -q $fileplan ; fi

# get the date and experiment name
date1=$(xe-getkey $fileplan "date=")
if [ "$date1" == "" ] ; then  { echo -e "\n--- Error ["$thisprog"]: date undefined in $fileplan \n" ; exit ; } fi
exptname=$(xe-getkey $fileplan "experiment=")
if [ "$exptname" == "" ] ; then  { echo -e "\n--- Error ["$thisprog"]: experiment name undefined in $fileplan \n" ; exit ; } fi
echo "	date= "$date1
echo "	experiment= "$exptname

# make sure PLAN file has a MAPPING section
let z=$(xe-strxmlparse1 $fileplan MAPPING | wc -l)
if [ $z -lt 1 ] ; then { echo -e "\n--- Error ["$thisprog"]: no MAPPING section in $fileplan \n" ; exit ; } fi
# check that each subject-session combination appears only once
z=$(xe-strxmlparse1 $fileplan MAPPING | xe-cut1 stdin session,subject -o 1 -s 1 | awk '{print $1"_"$2}'  | uniq -d)
if [ "$z" ] ; then { echo -e "\n--- Error ["$thisprog"]: duplicates of session-subject combinations in $fileplan\n" ; exit ; } fi
# make prototype trials records - excluding start-stop-seconds columns
xs-TAINI-tools trials | xe-strsub1 stdin time latency > $tempfile".t1"
let z=$(xe-cut1 $tempfile".t1" session,subject -s 1 -o 1 | wc -l)
if [ $z -lt 1 ] ; then { echo -e "\n--- Error ["$thisprog"]: no subject/session combinations matching trials in $fileplan \n" ; exit ; } fi
# build a list of prospective .dat files
listdat=$(xe-cut1 $tempfile".t1" session,subject -s 1 -o 1  | awk '{print "'$date1'-"$1"_"$2".dat"}' | sort -u)
if [ ! "$listdat" ] ; then { echo -e "\n--- Error ["$thisprog"]: no session/subject entries in the MAPPING section of $fileplan \n" ; exit ; } fi

########################################################################################
# FOR EACH .DAT FILE IN THE LIST...
# - identify the .sync file
# - get the session parameters
# - table_trialmapping file to use the
# - find the matching Ethovision trials
########################################################################################
# pre-check that .dat and matching .sync files required for this experiment are present
echo "CHECKING FOR PRESENCE OF .dat FILES ..."
for filedat in $listdat ; do
	echo "	$filedat"
	if [ ! -e $filedat ] ; then { echo -e "\n--- Error ["$thisprog"]: missing .dat file $filedat - check date and MAPPING section in $fileplan\n" ; exit ; } fi
	if [ ! -s $filedat ] ; then { echo -e "\n--- Error ["$thisprog"]: empty .dat file $filedat\n" ; exit; } fi
	z=$(xe-ldas5-readdat2 $filedat -nch $setnchans -n 1 2>&1 | grep -i error --color=never)
	if [ "$z" ] ; then echo -e "\n	"$z ; echo ; exit ; fi
done

echo -e "\nEXTRACTING SYNC/TRIAL DATA..."
for filedat in $listdat ; do
	echo -e "\tProcessing $filedat"
	rm -f $tempfile.notes

	#-----------------------------------------------------------------------
	# PARSE THE .DAT FILENAME FOR DATE, SESSION AND SUBJECT
	# no need to check name-format, since list of filenames was built from the MAPPING fields in the first place
	date2=$(xs-ldas-parsename $filedat date -f)
	session=$(xs-ldas-parsename $filedat session -fs)
	subject=$(xs-ldas-parsename $filedat subject -f)
	base=$date2"-"$session"_"$subject
	dest=$setdestbase"/"$date2"-"$session"_"$subject
	filelost=$(ls $dest/$base"-lost.ssp" 2>/dev/null)
	filesync=$(xs-strsub $filedat .dat .sync)

	#-----------------------------------------------------------------------
	# GET THE BATCH AND BOX NUMBER SO WE CAN IDENTIFY THE CORRECT BLOCK OF TRIALS
	batch=$(xe-dbmatch1 $fileplan session $session  -xml "MAPPING" | xe-dbmatch1 stdin subject $subject -o 1 -oc batch)
	box=$(xe-dbmatch1 $fileplan session $session  -xml "MAPPING" | xe-dbmatch1 stdin subject $subject -o 1 -oc box)

	#-----------------------------------------------------------------------
	# SAVE THE TRIALS FROM THIS BATCH (batch,box,time)
	# - if there is no time column (here, a measure of Hargreaves latency), add a "-"
	echo -e "box\tbatch\tlatency" > $tempfile.trials
	xe-strxmlparse1 $fileplan "TRIALS" |
		xe-dbmatch1 stdin batch $batch |
		xe-cut1 stdin box,batch,time -o 1 |
		awk '{a=$1;b=$2;c=$3; if(c=="") c="-"; print a"\t"b"\t"c}' >> $tempfile.trials
	let ntrials=$(tail -n +2 $tempfile.trials | wc -l)

	#-----------------------------------------------------------------------
	# USE xs-TAINI-tools TO SAVE THE SYNC PULSES AND CALCULATE %PACKETLOSS
	echo -e "start\tstop\tseconds\t%lost" > $tempfile.sync
	# determine the matching sync file-name (NOTE that .dat and .sync file names have already been checked for presence and content)
	let nsync=0
	if [ -f $filesync ] && [ -s $filesync ] ; then
		# save the sync start-stop records
		xs-TAINI-tools sync --file $filesync > $tempfile
		# check for errors
		z=$(grep --color=never "Error" $tempfile)
		if [ "$z" ] ; then
			cat $tempfile
		else
			# concatenate the start stop and duration
			awk '$1!~/SYNC/&&NF>1{print $1,$2,(($2-$1)/'$setsf')}' $tempfile | xe-delimit stdin >> $tempfile.sync
			let nsync=$( awk 'NF>1&&$0!~/start/{print $0}' $tempfile.sync | wc -l)
		fi
	fi
	# if there are any syncs,
	if [ $nsync -gt 0 ] ; then
		if [ "$filelost" != "" ] ; then
			head -n 1  $tempfile".sync" > $tempfile
			tail -n +2 $tempfile".sync" |
			while read start stop secs dummy ; do
				let dur=$stop-$start
				let lost=$(xe-ldas5-readssp1 $filelost -out -2 -scrl $start,$stop | xe-getkey stdin total_duration=)
				per=$(echo "scale=3;100*$lost/$dur"|bc)
				echo $start $stop $secs $per | xe-delimit stdin >> $tempfile
			done
			mv $tempfile $tempfile".sync"
		fi
	else
		echo -e "--- Warning: empty or missing sync file $filesync: creating dummy values "
		echo -e "start\tstop\tseconds\t%lost" > $tempfile.sync
		seq 1 $ntrials | awk '{print "0\t0\t0.000\t".000}' >> $tempfile.sync
		let nsync=$ntrials
	fi

	#-----------------------------------------------------------------------
	# CHECK THAT NTRIALS= NSYNC
	echo -e "\t\tbatch:"$batch"  box:"$box"  nsync:"$nsync"  ntrials:"$ntrials
	if [ $nsync != $ntrials ] ; then
		echo
		echo "--- Error ["$thisprog"]: batch $batch mismatch between sync pulses(n=$nsync) and trials(n=$ntrials)"
		echo "	- skipping this subject"
		echo "	- check batches match in the MAPPING and TRIALS sections of $fileplan"
		echo "	- if they do, this error suggests that TRIALS may have been incorrectly recorded"
		echo
		continue
	fi

	#-----------------------------------------------------------------------
	# ADD THE TRIALS SECTION TO THE NOTES FILE
	mkdir -p $dest
	filenotes=$dest"/"$base".notes"
	if [ ! -e "$filenotes" ] ; then
		echo
		echo "--- Error ["$thisprog"]: no notes file in $dest/$base"
		echo "	- looks like the PLAN file has not been pre-processed"
		echo "	- run xs-TAINI-preproc1 before running $thisprog"
		echo
		exit
	fi
	# save only the sync pulses for the correct trials (current box)
	# add a column of "-" for %packet loss by default
	paste $tempfile.sync $tempfile.trials |
		xe-dbmatch1 stdin box $box |
		xe-cut1 stdin start,stop,seconds,%lost,latency |
		awk '
			BEGIN{n=0}
			{
				if(n==0)print "trial\t"$0"\tname";
				else print n"\t"$0"\t"n;
				n++
			}
		' > $tempfile.trialsync
	# combine trials and sync, information
	echo "<TRIALS>" > $tempfile.notes
 	cat $tempfile.trialsync >> $tempfile.notes
	echo "</TRIALS>" >> $tempfile.notes
	echo "" >> $tempfile.notes
	# insert this trials section file into the existing notes file
	# if the TRIALS section already exists, it will be overwritten
	xs-ldas-updatenotes2 $filenotes TRIALS $tempfile.notes > $tempfile
	mv $tempfile $filenotes

done # END OF LOOP: for filedat in $listdat ; do



################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi

exit

################################################################################
# LEGACY CODE FROM xs_TAINI-tools
# - this is to run rliminary checks on .plan/.sync correspondence and to summarise trials
# - both assume a .plan file are present
# - these options could (should?) be incorporated as options in this script
# - example - instead of planfile, set mode
################################################################################

#-------------------------------------------------------------------------------
if [ "$setmode" == "check" ] ; then
	if [ "$fileplan" == "" ] ; then { echo ; echo "--- Error ["$thisprog"]: no file matching *.plan in this directory" ; echo ; exit; } ; fi
	# make sure mapping section is present
	xe-strxmlparse1 $fileplan MAPPING | awk 'NF>0&&$0!~/^#/{print $0}' > $tempfile
	if [ ! -s $tempfile ] ; then { echo ; echo -e "$RED--- Error ["$thisprog"]: empty or missing MAPPING section in $fileplan$NC" ; echo ; exit; } ; fi
	# make sure subject-ids are entered
	xe-cut1 $tempfile session,subject,batch,box -s 1 -d '\t' | awk -F'[- \t]+' 'NF!=4{print $0}' > $tempfile".error"
	if [ -s $tempfile.error ] ; then { echo ; echo -e "$RED--- Error ["$thisprog"]: missing field (session,subject,batch,box) in MAPPING section of $fileplan$NC" ; xe-delimit $tempfile ; echo ; exit; } ; fi
	# check for within-session duplicate subjects
	xe-cut1 $tempfile session,subject -o 1 | uniq -d > $tempfile".error"
	if [ -s $tempfile.error ] ; then { echo ; echo -e "$RED*** duplicate session-subject combination in $fileplan: $NC" ; cat $tempfile".error" ; echo ; exit; } ; fi
	listbatch1=$(xe-strxmlparse1 $fileplan MAPPING | xe-cut1 stdin batch -s 1 -o 1 -d '\t' |sort -nu| grep [0-9] --color=never | paste -s | tr '\t' ' ')
	listbatch2=$(xe-strxmlparse1 $fileplan TRIALS | xe-cut1 stdin batch -s 1 -o 1 -d '\t' |sort -nu| grep [0-9] --color=never | paste -s | tr '\t' ' ')
	if [ "$listbatch1" != "$listbatch2" ] ; then { echo ; echo "--- Error ["$thisprog"]: batches in MAPPING ($listbatch1) differ from batches in TRIALS ($listbatch2)" ; echo ; exit; } ; fi
	if [ "$listbatch1" == "" ] ; then { echo ; echo "--- Error ["$thisprog"]: no batches identified in MAPPING or TRIALS sections" ; echo ; exit; } ; fi
	if [ $setbatch == "all" ] ; then listbatch3=$listbatch1 ; else listbatch3=$setbatch ; fi
	for batch in $listbatch3 ; do
		echo "Checking sync/plan correspondence for batch #"$batch"..."
		# output the registered trials for each box
		xe-dbmatch1 $fileplan batch $batch -xml TRIALS |
			xe-cut1 stdin batch,box -o 1 -d '\t' |
			awk '
			BEGIN {tot=0}
			{ tot++ ; if($2=="x"||$2=="-") n[0]++ ; else n[$2]++ }
			END {
				for(i=1;i<='$nboxes';i++) print "batch '$batch' box "i": "n[i]
				print "invalid trials: "n[0]
				print "TOTAL: "tot
			}'
		# output the sync-pulse count for files matching the batch subject-ids
		listsub=$(xe-dbmatch1 $fileplan batch $batch -xml MAPPING -oc subject -o 1)
		x=$(echo $setseq | tr ',' ' ')
		for i in $listsub ; do
			in1=$(ls -1 *_$i*.sync | head -n 1)
			z=$(xe-getsequence1 $in1 2 exact $x | grep "#" --colour=never | cut -f 3 -d " ")
			echo $in1": "$z
		done
		echo
	done

#-------------------------------------------------------------------------------
elif [ "$setmode" == "trials" ] ; then

echo -e $RED"\n--- Error["$thisprog"]: this mode is not implemented yet\n"$NC; exit

	if [ "$fileplan" == "" ] ; then echo -e $RED"\n--- Error["$thisprog"]: trials-mode requires a .plan file\n"$NC; exit ; fi
	let ntrialstot=$(xe-strxmlparse1 $fileplan TRIALS | xe-cut1 stdin batch,box -s 1 -o 1 | wc -l)
	if [ $ntrialstot -lt 1 ] ; then echo -e $RED"\n--- Error["$thisprog"]: missing or empty TRIALS section in $fileplan\n"$NC; exit ; fi


	filebatch=$(xe-strxmlparse1 $fileplan MAPPING | xe-cut1 stdin subject,session,batch -s 1 | awk '$1=='$subject'&&$2=='$session'{print $3}')
	if [ "$filebatch" == "" ] ; then { echo -e $RED"\n--- Error["$thisprog"]: no matching batch record for $setfile in $fileplan - this is required for running in \"trials\" mode\n"$NC; exit ; }  fi

	# DETERMINE THE EXPECTED BATCH FROM SYNC FILE-NAME, IF SPECIFIED
	if [ "$setfile" != "" ] ; then
		if [ "$setbatch" == "all" ] ; then  setbatch=$filebatch
		elif [ "$filebatch" != "$setbatch" ] ; then
				echo -e $RED"\n--- Error: specified batch ($setbatch) does not match the .plan file MAPPING batch entry ($filebatch) for subject $subject and session $session, as derived from --file $setfile"
				xe-strxmlparse1 $fileplan MAPPING
				echo -e "$NC"
				exit
		fi
	fi

	# BUILD A LIST OF ALL TRIALS
	listcols=$(xe-strxmlparse1 $fileplan TRIALS | awk 'NF>0&&$0!~/^#/{print $0;exit}' | tr '\t' '\n' | grep -vE 'batch|box' | paste -s | tr '\t' ',')
	xe-strxmlparse1 $fileplan TRIALS | xe-cut1 stdin batch,box -s 1 -d '\t' | awk '{print $1"#"$2}' > $tempfile.0
	xe-strxmlparse1 $fileplan TRIALS | xe-cut1 stdin $listcols -s 1 -d '\t' | paste $tempfile.0 - > $tempfile.1
	xe-strxmlparse1 $fileplan MAPPING | xe-cut1 stdin batch,box -s 1 -d '\t' | awk '{print $1"#"$2}' > $tempfile.0
	xe-strxmlparse1 $fileplan MAPPING | xe-cut1 stdin session,subject,$setappend -s 1 -d '\t' | paste $tempfile.0 - > $tempfile.2
	# apply subject & session to trials according to the batch/box combination in the mapping section
	if [ "$setappend" != "" ] ; then
		xe-dbmatch2 $tempfile".1" batch#box $tempfile".2" subject |    # add subject
		xe-dbmatch2 stdin batch#box $tempfile".2" session  | # add session
		xe-dbmatch2 stdin batch#box $tempfile".2" $setappend > $tempfile.3 # append the extra column from the MAPPING section
	else
		xe-dbmatch2 $tempfile".1" batch#box $tempfile".2" subject |    # add subject
		xe-dbmatch2 stdin batch#box $tempfile".2" session > $tempfile.3  # add session
	fi

	# BREAK BATCH-BOX FIELD AND ADD TRIAL NUMBERS
	cat $tempfile.3 |
		tr '#' '\t' | # restore delimiter for subject & session
		xe-cut1 stdin batch,box,subject,session,$listcols,$setappend -d '\t' | # reorder columns
		awk 'NF>0{print $0}' |
		xe-timestamp1 stdin -sf 1 -o 1 -p 0 -head trial > $tempfile.4

	# FILTER TRIALS BY BATCH IF REQUIRED
	if [ "$setbatch" != "all" ] ; then
		xe-dbmatch1 $tempfile.4 batch $setbatch > $tempfile
		mv $tempfile $tempfile.4
	fi

	# ADD SYNC RECORDS IF A SYNC FILE IS SPECIFIED
	let x=0 ; let y=0 ; let z=0;
	if [ "$setfile" != "" ] ; then
		mv $tempfile.4 $outbase.2
		# call back to this program to generate syc record
		if [ "$setverb" == "1" ] ; then echo "$thisprog  sync --file $setfile --seq $setseq0 --blank $setblank0 --batch $setbatch" ; fi

		# call this program in sync-mode
		$thisprog  sync --file $setfile --seq $setseq0 --blank $setblank0 --batch $setbatch > $outbase.3

		mv $outbase.2 $tempfile.2
		mv $outbase.3 $tempfile.3
		let x=$(tail -n +2 $tempfile.2 | wc -l) # number of trials
		let y=$(tail -n +2 $tempfile.3 | wc -l) # number of syncs
		let z=$(grep Error $tempfile.3 | wc -l)

		if [ $z -gt 0 ] ; then
			cat $tempfile.3
			if [ "$setclean" == "1" ] && [ "$tempfile" != "" ] ; then rm -f $tempfile.* ; fi
			exit
		elif [ $x -ne $y ] ; then
			echo -e $RED
			echo "--- Error ["$thisprog"]: batch $setbatch mismatch between sync pulses($y) and trials($x)"
			echo "	- check batches match in the MAPPING and TRIALS sections of $fileplan"
			echo "	- if they do, this error suggests that TRIALS may have been incorrectly recorded"
			echo -e $NC
			if [ "$setclean" == "1" ] && [ "$tempfile" != "" ] ; then rm -f $tempfile.* ; fi
			exit
		else paste $tempfile.2 $tempfile.3 |
			xe-dbmatch1 stdin subject $subject > $tempfile.4
		fi
	fi

	# OUTPUT
	cat $tempfile.4
fi
