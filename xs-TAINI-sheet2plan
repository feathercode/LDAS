#!/bin/bash
# <TAGS>laser</TAGS>

thisprog=`basename "$0"`
progbase1=$(echo $thisprog | awk -F - '{print toupper($NF)}')
allopts=$@
tempfile="temp_"$thisprog #"."$$"."
outfile1=$progbase1".plan"
outfile2=$progbase1".missing"

startdir=$(pwd)
start_time=$(date +'%s.%3N')
date0=$(date)
setverb="0"
setclean="1"

# HERE's a sample CSV file which culd represent the input for this program
# note in this example on nly one block is presented, and column 4 is blank

# SYNC_FILE=,20191031-001_10345.sync,,,,,,,,,
# PIL= ,11223344,,,,,,,,,
# DATE= ,2019/10/31,,,,,,,,,
# SPOT_SIZE=, 4 mm ,,,,,,,,,
# PULSE_DUR=, 4 ms,,,,,,,,,
# ,,,,,,,,,,
# NBOXES=,3,1,,1,,1,,0,,
# BOX_NUMS,,1,,2,,3,,4,,
# DOSSIER_IDS,,10345,,10346,,10347,,,,
# ,,,,,,,,,,
# BLOCK#1,STIM=,1.50,,,,,,,,
# sub_stim,stim,code,stim,code,stim,code,stim,code,,
# 1,1,L1,2,L2,3,L3,4,,,
# 2,4,R1,5,R2,6,R3,7,,,
# 3,7,L1,8,L2,9,L3,10,,,
# 4,10,R1,11,X R2,12,R3,13,,,
# 5,13,L1,14,L2,15,L3,16,,,
# 6,16,R1,17,R2,18,R3,19,,,
# 7,19,L1,20,L2,21,L3,22,,,
# 8,22,R1,23,R2,24,R3,25,,,
# 9,25,L1,26,L2,27,L3,28,,,
# 10,28,R1,29,R2,30,R3,31,,,
# 11,31,L1,32,L2,33,L3,34,,,
# 12,34,R1,35,R2,36,R3,37,,,
# ,,,,,,,,,,

################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": convert a laser-ERP CSV file to a .plan for xs-TAINI-preproc1"
	echo "USAGE: $thisprog [worksheet] [options]"
	echo "	[worksheet]: an XLSX or CSV version of a laser-ERP experimental worksheet"
	echo ""
	echo "GENERAL OPTIONS..."
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo ""
	echo "EXAMPLE: "
	echo "	$thisprog \"20181231_000.xlsx 20181231_001.xslx\""
	echo ""
	echo "OUTPUT..."
	echo ""
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

########################################################################################
# ARGUMENT HANDLING
########################################################################################
# get list of worksheet file names
listinfiles=$(ls $1 2>/dev/null) ; shift
if [ "$listinfiles" == "" ] ; then { echo -e "\n--- Error ["$thisprog"]: no worksheet files found matching \"$1\"\n" ;  exit; } ; fi

# optional arguments
vs="v:c:" ; vl="verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo "" ; echo "--- Error ["$thisprog"]"$y ; echo ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	# do band detection
	for band in $(seq 1 $nbands) ; do if [ "$1" == "--"${fname[$band]} ] ; then { setband[$band]=$2 ; shift ; } fi ; done
	# do the rest
	case $1 in
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] && [ "$setverb" != "2" ]; then {  echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0-2\n" ; exit ;  } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then {  echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ; exit ;  } ; fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$progbase1" != "" ] ; then rm -f $progbase1* ; fi
fi



################################################################################
# INITIALISE OUTPUT FILES
################################################################################
echo  > $tempfile.mapping
echo "<MAPPING>" >> $tempfile.mapping
echo -e "batch\tbox\tsession\tsubject" >> $tempfile.mapping
echo  > $tempfile.trials
echo "<TRIALS>"  >> $tempfile.trials
echo -e "batch\tbox\tsubject\tblock\ttrial\ttrialtot\tstim\ttarget\tresponse" >> $tempfile.trials
echo -e "batch\tblock\ttotal\tmissing" > $outfile2


################################################################################
# FILE LOOP - FOR EACH WORKSHEET
################################################################################
let batch=0
for infile in $listinfiles ; do

	echo -e "- PROCESSING $infile..."

	let batch=$batch+1

	################################################################################
	# STORE A VERSION OF THE FILE WITH COMMAS CONVERTED TO TABS
	base=${infile%%.*}
	ext=${infile##*.}

	if [ "$ext" == "xlsx" ] ; then
		echo -e "\t- converting from xlsx file format"
		if [ "$(command -v libreoffice)" == "" ] ; then
			echo -e "\n--- Error ["$thisprog"]: libreoffice is not installed on this machine: cannot convert to HTML\n"
			exit
		fi
		libreoffice --headless --convert-to csv $infile > $tempfile"_convert.log" &> /dev/null
		infile=$base".csv"
	elif [ "$ext" != "csv" ] ; then
		echo -e "\n--- Error ["$thisprog"]: file-type ($infile) - must be a xlsx or csv file\n"
		exit
	fi

	echo -e "\t- replacing commas with tabs"
	cat $infile | tr ',' '\t' | awk '{if(NF<2) print "" ; else print $0}' > $tempfile".1"

	################################################################################
	# GENERATE HEADER
	yamlfile=$(xe-getkey2 $tempfile".1" YAML_FILE=)
	# ??? could use a check here
	date2=$(xe-getkey2 $tempfile".1" DATE=)
	expt=$(xe-getkey2 $tempfile".1" EXPT=)
	nboxes=$(xe-getkey2 $tempfile".1" NBOXES=)
	pattern="BLOCK#"
	listblocks=$(grep $pattern $tempfile".1" --color=never | awk '{print $1}' | tr '\n' ' ')
	let nblocks=$(grep -c $pattern $tempfile".1")
	# determine the session from the .yaml file
	session=$(xs-TAINI-tools parse --file $yamlfile --key inc)

	rm -f $tempfile.header
	echo -e "worksheet= $infile" >> $tempfile.header
	echo -e "yamlfile= $yamlfile" >> $tempfile.header
	echo -e "date= $date2" >> $tempfile.header
	echo -e "experiment= $expt" >> $tempfile.header
	echo -e "nboxes= $nboxes" >> $tempfile.header
	echo >> $tempfile.header

	################################################################################
	# STORE LIST OF BOX-COLUMNS
	listcols=$(grep NBOXES= $tempfile".1" | awk -F '\t' '{for(i=3;i<=NF;i++) if($i>0)print i}')
	listcols2=$(echo $listcols | tr ' ' ',')
	let nboxes=0
	for x in $listcols ; do
		let nboxes=$nboxes+1
		boxcol[$nboxes]=$x
	done

	################################################################################
	# GENERATE MAPPING SECTION
	 # get the subject ids for each box, and invalidate the box if the id is "0"
	listids=$(grep "SUBJECT_IDS" $tempfile".1" | cut -f $listcols2)
	let nids=0
	let count=0
	listcols3=""
	listids3=""
	for x in $listids ; do
		let count=$count+1
		good=$(echo $x | awk '{if($1>0)print 1 ; else print 0}') ;
		if [ "$good" == "1" ] ; then
			let nids=$nids+1
			id[$nids]=$x
			if [ $nids -eq 1 ] ; then y="" ; else y="," ; fi
			listcols3=$listcols3""$y""${boxcol[$count]}
			listids3=$listids3""$y""$x
		fi
	done
	# add the mapping entries
	for i in $(seq 1 $nboxes) ; do
		echo -e "$batch\t"$i"\t"$session"\t"${id[$i]} >> $tempfile.mapping
	done

	################################################################################
	# BUILD THE TRIALS SECTION
	################################################################################
	echo -e "\t- analyzing blocks..."

	# INITIALISE trialtot
	let trialtot=0

	for code in $listblocks ; do

		block=${code##*#}
		stim=$(xe-cut2 $tempfile".1" $code -s1 1 | head -n 1 | xe-delimit stdin | tr '\t' ' ' | tr -s " " | xe-getkey stdin STIM=)
		if [ "$stim" == "" ] ; then echo -e "\t\t- skipping block $block: no stim strength specified" ; continue ; fi

		# BUILD A TEMP-FILE FOR THIS BLOCK ONLY
		echo $listids3 | tr ',' '\t' > $tempfile".2"
		xe-cut2 $tempfile".1" $code -s3 tot: | tail -n +3 | cut -f $listcols3 | awk 'NF>0{print $0}' >> $tempfile".2"
		rm -f $tempfile".3"

		# NOW START DOING THE TRIAL ANALYSIS
		cat $tempfile".2" |
		awk -F '\t' '
		BEGIN { n=0; trials=0; out1="'$tempfile'.3"; out2="'$outfile2'" }
		{
			n++
			if(n==1) { missing=0 ; for(i=1;i<=NF;i++) id[i]=$i }
			else {
				for(i=1;i<=NF;i++) {
					output=""
					target="-"
					response="-"
					empty="0"

					split($i, chars, "")
					if(length($i)<1) continue

					for (j=1;j<=length($i);j++) {
						char=chars[j]
						if(char=="") {
							continue
						}
						else if(char=="x"||char=="X") {
							trials++
							missing++
							z= '$trialtot'+trials
							output="'$batch'\t"i"\t"id[i]"\t'$block'\t"trials"\t"z"\t'$stim'\t"target"\t"response"\t"
							print output >> out1
							if(j==length($i)) empty="1"
							continue
						}
					else if(char=="L") { target="BL" }
					else if(char=="R") { target="BR" }
						else if(char~/[0-9]/) { response=char }
					}

					if(empty=="0") {
						trials++
						z= '$trialtot'+trials
						output="'$batch'\t"i"\t"id[i]"\t'$block'\t"trials"\t"z"\t'$stim'\t"target"\t"response
						print output >> out1
					}
				}
			}
		}
		END { print "'$batch'\t'$block'\t"trials"\t"missing >> out2 }
		'
		# UPDATE trialtot
		let z=$(cat $tempfile".3" | wc -l)
		let trialtot=$trialtot+$z

		# APPEND THIS BLOCK TO THE TRIALS SECTION
		cat $tempfile".3" >> $tempfile.trials
		echo "" >> $tempfile.trials

	done # END OF LIST-BLOCKS LOOP

done # END OF INFILE LOOP

echo "</MAPPING>" >> $tempfile.mapping
echo "</TRIALS>" >> $tempfile.trials

cat $tempfile.header $tempfile.mapping $tempfile.trials > $outfile1

if [ "$setverb" == "1" ] ; then cat $outfile1 ; fi
if [ "$setverb" == "2" ] ; then echo "# "$infile ; cat $outfile2 ; fi


################################################################################
# CHECK FOR DUPLICATES IN THE MAPPING SECTION
################################################################################
let nmap1=$(xe-strxmlparse1 $outfile1 MAPPING | xe-cut1 stdin subject,session -s 1 -o 1 | wc -l)
let nmap2=$(xe-strxmlparse1 $outfile1 MAPPING | xe-cut1 stdin subject,session -s 1 -o 1 | sort -u | wc -l)
if [ $nmap2 -lt $nmap1 ] ; then
	echo -e "\n--- Error ["$thisprog"]: duplicate subject/session entries found"
	echo -e "\t - check that all worksheets specify different sync files\n"
	exit
fi

################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
echo "- results sent to: "
echo "	$outfile1"
echo "	$outfile2"

if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi
exit
