#!/bin/bash
thisprog=`basename "$0"`
tempfile="temp_"$thisprog

if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": extract data from plots (.ps) generated by xe-plottable1"
	echo "- one of points or lines must be defined"
	echo "- if error-bars are defined, these too will be printed"
	echo "- if no groups are defined, group is \"0\" by default"
	echo
	echo "USAGE: "
	echo "	"$thisprog" [postscript-file]"
	echo ""
	echo "EXAMPLE: "
	echo "	"$thisprog" temp_xe-plottable1.ps"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

################################################################################
# PARSING PATHS AND FILENAMES
################################################################################
infile=$1
# check file exists & isn't empty
if [ ! -e "$infile" ] ; then { echo -e "\n--- Error ["$thisprog"]: missing file $infile\n" ;  exit; } ; fi
if [ ! -s "$infile" ] ; then { echo -e "\n--- Error ["$thisprog"]: $infile is empty\n" ;  exit; } ; fi

################################################################################
# GET CONVERSION FACTOR USED FOR ERROR-BARS
################################################################################
xfactor=$(grep /xfactor $infile | tr '{' ' ' | tr '}' ' ' | cut -f 3 -d " ")
yfactor=$(grep /yfactor $infile | tr '{' ' ' | tr '}' ' ' | cut -f 3 -d " ")

################################################################################
# GET THE LIST OF GROUP-TAGS, REMOVING LEADING "%"
################################################################################
glist=$(grep "% PLOT_VALUES_GROUP" $infile --color=never | awk '{print $2}')

################################################################################
# FOR EACH GROUP, EXTRACT XDATA, YDATA, AND IF PRESENT, XERR AND YERR ...
################################################################################
let count=0
for g in $glist ; do
	let count=$count+1
	# get group ID
	group=$(echo $g | awk -F _ '{print $NF}')
	# save the block of code for this group - up to the first blank line
	xe-cut2 $infile "$g" -s1 1 > $tempfile.0
	# extract the values for points (P), lines (L), y-errorbars (E) and x-errorbars (F)
	awk '$3=="P"{print $1,$2}' $tempfile.0 > $tempfile".P"
	awk '$3=="L"{print $1,$2}' $tempfile.0 > $tempfile".L"
	awk '$4=="E"{print $1/'$yfactor'}' $tempfile.0 > $tempfile".E"
	awk '$4=="F"{print $1/'$xfactor'}' $tempfile.0 > $tempfile".F"
	# make sure one of lines or points is defined
	if [ ! -s $tempfile".P"  ] && [ ! -s $tempfile".L" ] ; then
		{ echo -e "\n--- Error ["$thisprog"]: no points or lines defined in $infile\n" ;  exit; }
	fi
	# initialise the header
	header="group xdata ydata"
	# initialise the list of input files to paste
	if [ -s $tempfile".P"  ] ; then in1=$tempfile".P" ; else in1=$tempfile".L" ; fi
	# add error-bars to header and input-list if files are not empty
	if [ -s $tempfile".E"  ] ; then in1=$in1" "$tempfile".E" ; header=$header" yerr" ; fi
	if [ -s $tempfile".F"  ] ; then in1=$in1" "$tempfile".F" ; header=$header" xerr" ; fi
	# output the header
	if [ $count -eq 1 ] ; then echo $header | xe-delimit stdin ; fi
	# output the columns of data
	paste $in1 | awk '{print "'$group' "$0}' | xe-delimit stdin

done

################################################################################
# CLEANUP AND EXIT
################################################################################
if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
exit
