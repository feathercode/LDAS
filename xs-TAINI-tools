#!/bin/bash
# <TAGS> TAINI plot </TAGS>

################################################################################
# INTIAL VARIABLE DEFINITIONS
################################################################################
# for most scripts...
thisprog=`basename "$0"`
progpath=$(dirname $(readlink -f "$0"))
tempfile="temp_"$thisprog #"."$$"."
progbase1=$(echo $thisprog | awk -F - '{print toupper($NF)}')

startdir=$(pwd)
start_time=$(date +'%s.%3N')
mydate=$(date +'%Y%m%d')
template_channels="$progpath/docs/templates/table_channels_taini_2.txt"
RED='\033[0;31m'	# for errors
PURPLE='\033[0;35m'	# for warnings
GREEN='\033[0;32m'	# for interactive text requiring input
NC='\033[0m' 		# to revert to default text colour

sample_rate="19531.25" # samples per second
n_channels="16" # number of interlaced channels
datbits="16" # 16 bit integer = short
datinvalid="32767" # placeholder for missing data-packets
setfiltlow="0.35"
setfilthigh="9700"
bit_depth="12" # bits actually used by TAINI to encode data

setexpt=""
setfile=""
setinput="ab"
setbatch="all"
setpre="SYNC_"
setseq0="2,0"
setkey=""
listkeys="id alias year month day date1 date2 inc"
setblank0="0"
setcount="0"
setappend=""

setverb="0"
setclean="1"

nboxes=4
filenotes=$(ls *.notes 2>/dev/null | head -n 1)
fileconfig=$(ls *configuration.yaml 2>/dev/null)
fileplot="plot_traces_"$thisprog".ps"

################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": run TAINI scripts for data setup, acquisition and testing"
	echo "	- some modes require a .yaml config file"
	echo "	- TAINI sync-records typically begin with a \"blank\" sync-0"
	echo ""
	echo "USAGE: $thisprog [mode] [options]"
	echo ""
	echo "VALID MODES (followed by options starting with --):"
	echo "	setup"
	echo "		Setup TAINI recording experiment (1) or session (2)"
	echo "		Option (1): whole experiment folder "
	echo "		Option (2): today's recording folder"
	echo "		Copies channel-table template $template_channels"
	echo "		--expt: name of experiment [$setexpt]"
	echo "	fft"
	echo "		Run spectrum viewer"
	echo "		--input: receiver input to show (ab or cd) [$setinput]"
	echo "	live"
	echo "		Run TainiLive"
	echo "	sync"
	echo "		Check a sync-file and extract start-stop pairs"
	echo "		--file: sync file to check & extract [$setfile]"
	echo "		--pre: the sync-record prefix [$setpre]"
	echo "		--seq: CSV list of valid sync-number sequence [$setseq]"
	echo "		--blank: required sync-record which is not output [$setblank0]"
	echo "		--count: use timestamps to count trials in blocks (0=NO 1=YES) [$setcount]"
	echo "			- uses mean interval + 5 s.d. as threshold"
	echo "	config"
	echo "		Output configuration settings (from .yaml)"
	echo "		--file: you MUST specify a .dat or .yaml file"
	echo "		--expt: override-name of experiment from .yaml [$setexpt]"
	echo "	parse"
	echo "		Parse a TAINI filename to extract a keyword"
	echo "		--file: the file whose name you want to parse"
	echo "		--key: the value of interest: $listkeys"
	echo "	plot"
	echo "		Generate a 1-second trace-plot for all .dat files"
	echo "		Looks for table_channels_[subject].txt"
	echo "	unrename"
	echo "		Attempt to restore original TAINI filenames"
	echo "		Assumes files have been renamed to the LDAS standard"
	echo "		.yaml files required"
	echo ""
	echo "EXTRA OPTIONS (defaults in []):"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo ""
	echo "EXAMPLES: "
	echo "	"$thisprog" fft --input 2"
	echo "	"$thisprog" setup --expt hargreaves_wk3"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

########################################################################################
# REQUIRED ARGUMENT HANDLING
########################################################################################
setmode=$1 ; shift

########################################################################################
# OPTIONAL ARGUMENT HANDLING
########################################################################################
vs="v:" ; vl="expt:,input:,batch:,file:,pre:,seq:,count:,append:,blank:,key:,verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo "" ; echo "--- Error ["$thisprog"]"$y ; echo ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		--expt )  setexpt=$2 ; shift ;;
		--batch ) setbatch=$2 ; shift ;;
		--count ) setcount=$2 ; shift ;;
		--verb )  setverb=$2 ; shift ;;
		--input ) setinput=$2 ; shift ;;
		--file )  setfile=$2 ; shift ;;
		--pre ) setpre=$2 ; shift ;;
		--seq ) setseq0=$2 ; shift ;;
		--blank ) setblank0=$2 ; shift ;;
		--key ) setkey=$2 ; shift ;;
		--append ) setappend=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done

# PERFORM CHECKS ON OPTIONS
if [ "$setcount" != "0" ] && [ "$setcount" != "1" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid --count ($setcount) -  must be 0 or 1" ; echo ; exit; } ; fi
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1" ; echo ; exit; } ; fi
if [ "$setinput" != "ab" ] && [ "$setinput" != "cd" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid --input ($setinput) -  must be ab or cd" ; echo ; exit; } ; fi
if [ "$setfile" != "" ]  && [ ! -e "$setfile" ] ; then { echo -e "\n$RED--- Error ["$thisprog"]: missing --file $setfile$NC\n"; exit; } fi

if [ "$setkey" != "" ] ; then
	let z=0
	for k in $listkeys ; do
		if [ "$setkey" == "$k" ] ; then let z=1 ; fi
	done
	if [ $z -eq 0 ] ; then { echo -e "$RED--- Error ["$thisprog"]: invalid --key ($setkey)\n\t- use one of $listkeys$NC\n";  exit; } fi
fi


# INITIAL CLEANUP
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	if [ "$progbase1" != "" ] ; then rm -f $progbase1* ; fi
fi

# UPDATE SETBLANK WITH PREFIX AND COUNT ELEMENTS
setblank=$setpre""$setblank0
# update setseq and setblank with proper sync-names
setseq=$(echo $setseq0 | sed 's/[^,]* */'$setpre'&/g')
let nseq=$(echo $setseq0 | tr ',' ' ' | wc -w)


################################################################################
# FILENAME PARSING SETUP - TO EXTRACT ID,ALIAS,DATE,INC
################################################################################
# DEFINE DEFAULT COLUMNS FOR TAINI NAME TEMPLATES
coldev="2" ; colalias="3" ; colyear="4" ; colmonth="5" ; colday="6" ; colinc="7"

# DETERMINE THE CONFIGURATION.YAML FOR FILE-CHECKS
if [ "$setfile" != "" ] ; then # ...ideally the yaml is based on the --file specified
	filext=$(echo $setfile | rev | cut -f 1 -d . | rev)
	if [ "$filext" == "dat" ] ; then
		fileyaml=$(grep $setfile *configuration.yaml -l --color=never 2>/dev/null)
	elif [ "$filext" == "sync" ] ; then
		z=${setfile%%.*}".dat"
		fileyaml=$(grep $z *configuration.yaml -l --color=never 2>/dev/null)
	elif [ "$filext" == "yaml" ] ; then
		fileyaml=$setfile
	fi
	if [ "$fileyaml" == "" ] ; then
		echo -e "$PURPLE--- Warning [$thisprog]: no matching config .yaml file - will look for an alternative$NC"
	fi
fi
if [ "$fileyaml" == "" ] ; then fileyaml=$(ls *configuration.yaml 2>/dev/null | head -n 1) ; fi

# DETERMINE THE COLUMNS IN THE FILENAME THAT CORRESPOND TO ID(DEV),ALIAS(SUBJECT),YEAR,MONTH,DAT,INC
if [ "$fileyaml" != "" ] ; then
	nametemplate=$(grep filename_template: --color=never $fileyaml | awk '{print $2}')
	if [ "$nametemplate" == "" ] ; then { echo -e $RED"\n--- Error: filename_template not defined in $fileyaml $NC\n"; exit ; }  fi
	coldev=$(echo $nametemplate | tr '_' '\n' | tr '-' '\n' | tr '.' '\n' | grep '$ID' -n --color=never | cut -f 1 -d ':')
	colalias=$(echo $nametemplate | tr '_' '\n' | tr '-' '\n' | tr '.' '\n' | grep '$ALIAS' -n --color=never | cut -f 1 -d ':')
	colyear=$(echo $nametemplate | tr '_' '\n' | tr '-' '\n' | tr '.' '\n' | grep '%Y' -n --color=never | head -n 1 | cut -f 1 -d :)
	colmonth=$(echo $nametemplate | tr '_' '\n' | tr '-' '\n' | tr '.' '\n' | grep '%m' -n --color=never | head -n 1 | cut -f 1 -d :)
	colday=$(echo $nametemplate | tr '_' '\n' | tr '-' '\n' | tr '.' '\n' | grep '%d' -n --color=never | head -n 1 | cut -f 1 -d :)
	colinc=$(echo $nametemplate | tr '_' '\n' | tr '-' '\n' | tr '.' '\n' | grep '$INC' -n --color=never | head -n 1 | cut -f 1 -d :)
	if [ "$colalias" == "" ] ; then { echo -e $RED"\n--- Error: filename_template (ALIAS) undefined in $fileyaml $NC\n"; exit ; }  fi
	if [ "$colyear" == "" ] ; then { echo -e $RED"\n--- Error: filename_template (Y) undefined in $fileyaml $NC\n"; exit ; }  fi
	if [ "$colmonth" == "" ] ; then { echo -e $RED"\n--- Error: filename_template (m) undefined in $fileyaml $NC\n"; exit ; }  fi
	if [ "$colday" == "" ] ; then { echo -e $RED"\n--- Error: filename_template (d) undefined in $fileyaml $NC\n"; exit ; }  fi
	if [ "$colinc" == "" ] ; then { echo -e $RED"\n--- Error: filename_template (INC) undefined in $fileyaml $NC\n"; exit ; }  fi
elif [ "$setmode" != "setup" ] ; then
	echo -e "$PURPLE--- Warning [$thisprog]: missing configuration.yaml file to define filename fields\n\t - using defaults instead$NC" >&2
fi

# DETERMINE THE DATE, SESSION AND SUBJECT BASED ON FILENAME
if [ "$setfile" != "" ] ; then
	date1="xxx" ; session="xxx" ; subject="xxx"
	# make a temporary "filefields" variable with - _ and . replaced by spaces to facilitate extraction of fields
	filefields=$(echo $setfile | tr '_' ' ' | tr '-' ' ' | tr '.' ' ')
	z=$(echo $filefields | cut -f 1 -d ' ')
	if [ "$z" == "TAINI" ] ; then
		# TAINI format (typical): TAINI-[DEV]_[subject]-[yyyyy]_[mm]_[dd]-[sess].sync
		filename="taini"
		date1=$(echo $filefields | cut -f $colyear,$colmonth,$colday -d ' ' | tr -d ' ')
		date2=$(echo $filefields | cut -f $colyear,$colmonth,$colday -d ' ' | tr ' ' '/')
		session=$(echo $filefields | cut -f $colinc -d ' ')
		subject=$(echo $filefields | cut -f $colalias -d ' ')
		device=$(echo $filefields | cut -f $coldev -d ' ')
	else
		# LDAS format: [yyyymmdd]-[sess]_[subject].sync
		filename="ldas"
		date1=$(echo $filefields | cut -f 1 -d ' ')
		date2=$(echo $date2 | xe-dateconv1 stdin -i 4 -o 3)
		subject=$(echo $filefields | cut -f 3 -d ' ')
		session=$(echo $filefields | cut -f 2 -d ' ')
		device="-"
	fi
fi



########################################################################################
# OPERATING MODES
########################################################################################
#-------------------------------------------------------------------------------
if [ "$setmode" == "setup" ] ; then

	if [ "$setexpt" == "" ] ; then { echo ; echo -e "$RED--- Error ["$thisprog"]: must define experiment (--expt) to make setup folder$NC"; echo; exit; } fi

	# SELECT MODE: 1= FULL EXPERIMENT FOLDER WITH DATA_ACQUIRED AND DATA_LIBRARY SUB-FOLDERS
	echo -e $GREEN ; read -p  "Whole experiment (1) or daily acquisition (2) ? " mode ; echo -e $NC
	while true ; do
		case $mode in
		[12]*)  break ;;
		*) echo ; echo -e "$RED--- Error: invalid choice ($mode) - choose 1 or 2"$NC ; echo ; exit ;;
		esac
	done

	# DETERMINE MASTER CHANNEL TEMPLATE
	in1=$template_channels
	if [ ! -e "$in1" ] ; then { echo ; echo -e "$RED--- Error ["$thisprog"]: missing file $in1$NC" ; echo ; exit; } ; fi

	# MAKE THE FOLDER
	dest=$mydate"_"$setexpt
	echo -e "\nCREATING FOLDER $dest"
	if [ -d "$dest" ]; then
		tput bel
		echo -e $PURPLE"--- Warning: folder $dest exists" >&2
		echo -e $GREEN ; read -p  "- overwrite contents? [y/n] " answer ; echo -e $NC
		while true ; do case $answer in
			[yY]* ) break ;;
			*) exit ;;
		esac ; done
	fi
	mkdir -p $dest
	if [ ! -d "$dest" ]; then { echo ; echo -e "$RED--- Error ["$thisprog"]: unable to create folder $dest $NC" ; echo ; exit; } ; fi

	cd $dest

	if [ "$mode" == "1" ] ; then
		echo -e "\t- generating Data_Acquired folder"
		echo -e "\t- generating Data_Library folder"
		echo -e "\t- initializing README.txt file"
		echo -e "\t- copying channels template"
		echo -e "\t- source: $template_channels"
		d=$(date +'%d %b %Y')
		mkdir -p "Data_Acquired"
		mkdir -p "Data_Library"
		echo "# NOTES ON EXPERIMENT $setexpt ($d)" > README.txt
		cat $in1 > ./"table_channels_template.txt"
	else
		in2=$(ls ./*table*channels*txt 2>/dev/null | head -n 1)
		if  [ "$in2" == "" ] ; then in2=$(ls ../*table*channels*txt 2>/dev/null | head -n 1) ; fi
		if  [ "$in2" == "" ] ; then in2=$(ls ../../*table*channels*txt 2>/dev/null | head -n 1) ; fi
		if [ "$in2" == "" ] ; then in2=$in1 ; fi
		echo -e "\t- copying channels template"
		echo -e "\t- source: $in2"
		cat $in2 > ./"table_channels_template.txt"
	fi

	echo


#-------------------------------------------------------------------------------
# PULL OUT SOME BASIC INFO FROM THE FILENAME
elif [ "$setmode" == "parse" ] ; then
	if [ "$setfile" == "" ] ; then { echo -e "$RED--- Error ["$thisprog"]: use --file to define a filename to parse $NC\n";  exit; } fi
	if [ "$setkey" == "" ] ; then { echo -e "$RED--- Error ["$thisprog"]: use --key to set the keyword to extract\n\t- options: $listkeys$NC\n";  exit; } fi
	# remove extension
	base=${setfile%%.*};
	case $setkey in
		id ) echo $device ;;
		alias ) echo $subject ;;
		year ) echo $base | xe-cut1 stdin $colyear -n 1 -d "-_" ;;
		month ) echo $base | xe-cut1 stdin $colmonth -n 1 -d "-_" ;;
		day ) echo $base | xe-cut1 stdin $colday -n 1 -d "-_" ;;
		date1 ) echo $date1 ;;
		date2 ) echo $date2 ;;
		inc ) echo $session ;;
	esac



#-------------------------------------------------------------------------------
elif [ "$setmode" == "live" ] ; then
	command="/opt/tainitec/bin/launch tainilive"
	echo "COMMAND: "$command
	sudo $command


#-------------------------------------------------------------------------------
elif [ "$setmode" == "fft" ] ; then
	case $setinput in
		ab ) command="/opt/tainitec/bin/launch fft ab rfa" ;;
		cd ) command="/opt/tainitec/bin/launch fft cd rfb" ;;
	esac
	echo "COMMAND: "$command
	sudo $command


#-------------------------------------------------------------------------------
elif [ "$setmode" == "sync" ] ; then

	# is --file set?
	if [ "$setfile" == "" ] ; then { echo -e "\n$RED--- Error ["$thisprog"]: please set a sync input file (--file) $NC\n"; exit; } fi
	# is it a sync file?
	if [ "$filext" != "sync" ] ; then { echo -e $RED"\n--- Error: for mode \"trials\", --file ($setfile) must refer to a .sync file  $NC\n" ; exit ; }  fi

	seq2=$(echo $setseq | tr ',' ' ')
	let nseq2=$(echo $seq2 | tr ',' ' ' | wc -w)
	seq3=$(echo $setseq | tr ',' '\n' | grep -v $setblank)
	let nseq3=$(echo $seq3 | wc -w)

	# extract non-comment >=2-column rows with a second column matching $setpre ($tempfile.1)
	awk '$0!~/^#/ && NF>=2 && $2~/^'$setpre'/ {print $0}' $setfile | xe-delimit stdin > $tempfile.1
	if [ ! -s $tempfile.1 ] ; then { echo -e "\n$RED--- Error ["$thisprog"]: no \"$setpre*\" records in $setfile $NC\n" ; exit; } ; fi
	# remove first sync if it is a zero, save the rest to $tempfile.2
	z=$(head -n 1 $tempfile.1 | awk '{print $2}' )
	if [ "$z" == $setblank ] ; then tail -n +2 $tempfile.1 > $tempfile.2 ; else cp $tempfile.1 $tempfile.2 ; fi
	# save the header
	echo $seq3 | xe-delimit stdin > $tempfile.3
	# extract the sequences - assumes the timestamp is in column-1
	xe-getsequence1 $tempfile.2 2 exact $seq2 | awk 'NF>0&&$0!~/^#/{print $0}' | grep -v $setblank | cut -f 1 | awk 'ORS=NR%'$nseq3'?"\t":"\n" {print $0}' >> $tempfile.3

	# CHECK IF THERE ARE NO SEQUENCES OR BAD SEQUENCES
	let w=$(tail -n +1 $tempfile.3 | wc -l)   # sequences in the file, header line omitted
	let x=$(cat $tempfile.2 | wc -l)          # all 2-column lines in sync file containing $setpre, minus a permissable starting-blank
	let y=$(tail -n +2 $tempfile.3 | wc -l)	  # total sequence-sets (trials)
	let z=$(echo $y*$nseq2 | bc)              # sequence-sets times the number of items in the sync-sequence
	if [ $w -lt 1 ] ; then
		echo -e $RED"\n--- Error: no valid sequences ($setseq) in $setfile $NC\n"
		if [ "$setclean" == "1" ] && [ "$tempfile" != "" ] ; then rm -f $tempfile.* ; fi
		exit
	elif [ $x -ne $z ] ; then
		echo -e "$GREEN--- Warning: additional, different sequences in $setfile" >&2
		echo -e "	- is that ok?" >&2
		echo -e "	- is --seq ($setseq) correctly defined?" >&2
		echo -e "	- is --blank ($setblank0) correctly defined?\n$NC" >&2
	fi

	if [ "$setcount" == "0" ] ; then cat $tempfile.3
	else {
		tail -n +2 $tempfile.3 > $tempfile.4
		# save the intervals
		xe-getdelta1 $tempfile.4 -t 1 > $tempfile.5
		# get the stats
		stats=$(xe-statsd1 $tempfile.5)
		mean=$(echo $stats | xe-getkey2 stdin MEAN)
		stddev=$(echo $stats | xe-getkey2 stdin STDDEV)
		# define the interval threshold
		thresh=$(echo "5 * $stddev + $mean" | bc | xe-math_round1 stdin -b 1)
		# count syncs by block
		paste $tempfile.4 $tempfile.5 |
			awk '
			BEGIN{ tot=0; m=0; block=1 ; thresh="'$thresh'"+0 ; print "TIME\tINT\tSYNC\tTOT"}
			{
				b=$2+0
				if(b>thresh) {block++ ; sync=0; print "" }
				sync++ ; tot++;
				print $1"\t"b"\t"sync"\t"tot

			}
			END {print "\nBLOCKS: "block}'
	}
fi

#-------------------------------------------------------------------------------
elif [ "$setmode" == "config" ] ; then
	# THIS OPTION WILL ONLY PARTLY WORK IF FILES WERE RENAMED
	# NOTE THAT YAML FILE, ID,ALIAS,DATE AND SESSION ARE ALREADY BE DEFINED UP TOP

	if [ "$setfile" == "" ] ; then { echo -e "$RED--- Error ["$thisprog"]: please set a .dat or .yaml input file (--file)$NC\n";  exit; } fi
	filesource="$setfile";
	start_date=""; start_time=""; stop_date=""; stop_time=""; stop_secs="";
	nbytes=""; datasize=""; datsamps=""; dursecs=""; duration="";
	if [ "$filext" == "dat" ] ; then
		# SET DEFAULT START/STOP DATE AND TIME
		# NOTE THAT IF THE .dat FILE WAS COPIED, IT'S POSSIBLE THE START/STOP/DURATION VALUES ARE INCORRECT
		# get the estimated start-date & time
		z=$(date -du --date="$stop_date $stop_time $dursecs seconds ago" +"%Y/%m/%d %H:%M:%S.%3N")
		start_date=$(echo $z | cut -f 1 -d ' ' )
		start_time=$(echo $z | cut -f 2 -d ' ' )
		start_secs=$(echo $start_time | xe-timeconv1 stdin)
		# use defaults for datbits, n_channels, and sample_rate
		# this uses the last-write-time of the .dat file as the reference time to count backwards using the number of bytes-written
		filesource=$setfile # this may be changed if a matching .yaml file is found
		stop_date=$(stat -L $setfile | grep Modify: | cut -f 2 -d ' ' | tr '-' '/')
		stop_time=$(stat -L $setfile | grep Modify: | cut -f 3 -d ' ')
		stop_secs=$(echo $stop_time | xe-timeconv1 stdin)
		nbytes=$(du -bL $setfile | cut -f 1)
		datasize=$(echo "$datbits/8"|bc) # bytes per datum, eg for 16bit integer
		datsamps=$(echo "scale=1; $nbytes/($datasize*$n_channels)" | bc)
		dursecs=$(echo "scale=12;$datsamps/$sample_rate" |bc)
		duration=$(echo $dursecs | xe-timeconv1 stdin -f 2)
		sample_rate=$(echo "scale=3; $datsamps / $dursecs" | bc)
		# avoid invalid result from "date" command by ensuring duration is at least 1-second
		let x=$(echo "$dursecs<1" | bc)
		if [ $x -eq 1 ] ; then dursecs="1"; duration="" ; fi
	elif [ "$filext" != "yaml" ] ; then
		{ echo -e $RED"\n--- Error: for mode \"config\", --file ($setfile) must be a .dat or .yaml file $NC\n" ; exit ; }
	fi

	# ADD EXTRA DATA AND UPDATE SOME VALUES BASED ON YAML CONTENTS IF POSSIBLE (SUBJECT,DEVICE,BAND - the latter is not in the file name)
	# NOTE THAT START/STOP ARE LESS LIKELY TO BE INCORRECT IF DERIVED FROM THE .YAML FILE
	if [ "$fileyaml" != "" ] ; then

		if [ "$setexpt" == "" ] ; then setexpt=$( xe-cut2 $fileyaml notes: -s4 1 | tr -d '"' | xe-getkey stdin experiment=) ; fi
		start_date=$(xe-cut2 $fileyaml recording: -s4 1 | grep start_datetime: --color=never | xe-delimit stdin | cut -f 2 | tr '-' '/')
		start_time=$(xe-cut2 $fileyaml recording: -s4 1 | grep start_datetime: --color=never | xe-delimit stdin | cut -f 3 | tr '-' '/')
		stop_date=$(xe-cut2 $fileyaml recording: -s4 1 | grep finish_datetime --color=never | xe-delimit stdin | cut -f 2 | tr '-' '/')
		stop_time=$(xe-cut2 $fileyaml recording: -s4 1 | grep finish_datetime --color=never | xe-delimit stdin | cut -f 3 | tr '-' '/')
		s1=$(date -d "$start_date $start_time" '+%s')
		s2=$(date -d "$stop_date $stop_time" '+%s')
		duration=$(echo $s2 - $s1 | bc | xe-timeconv1 stdin -f 2)
		datinvalid=$(xe-cut2 $fileyaml recording: -s4 1 | grep lost_data_symbol: --color=never | xe-delimit stdin | cut -f 2)
		sample_rate=$(xe-cut2 $fileyaml transmitters: -s4 1 | xe-getkey stdin nominal_sample_frequency: | head -n 1)
		n_channels=$(xe-cut2 $fileyaml transmitters: -s4 1 | xe-getkey stdin no_channels: | head -n 1)
		bit_depth=$(xe-cut2 $fileyaml transmitters: -s4 1 | xe-getkey stdin bit_depth: | head -n 1)
		a=$(xe-cut2 $fileyaml transmitters: -s4 1 | xe-getkey stdin prefilt_hp: | head -n 1)
		b=$(xe-cut2 $fileyaml transmitters: -s4 1 | xe-getkey stdin prefilt_lp: | head -n 1)
		# check validity of low-and high-pass filters - in previous versions of TAINI-live, the values were reversed
		if [ $(echo "$a > $b" | bc) -eq 1 ] ; then z=$a; a=$b ; b=$z ; fi
		setfiltlow=$a
		setfilthigh=$b
		# get extra values per recording
		grep --color=never -E -- ' id:' $fileyaml | tr -d ' '| cut -f 2 -d : > $tempfile".1"
		grep --color=never -E -- ' band_id:' $fileyaml | tr -d ' '| cut -f 2 -d : > $tempfile".2"
		grep --color=never -E -- ' alias:' $fileyaml | tr -d ' '| cut -f 2 -d : > $tempfile".3"
		grep --color=never -E -- ' output_destination:' $fileyaml | tr -d ' '| cut -f 2 -d : | awk -F / '{print $NF}' > $tempfile".4"
		paste $tempfile".1" $tempfile".2" $tempfile".3" $tempfile".4" > $tempfile".5"

		if [ "$filext" == "dat" ] ; then
			device=$(grep $setfile $tempfile".5" | cut -f 1)
			band=$(grep $setfile $tempfile".5" | cut -f 2)
		else
			device=$(cut -f 1 $tempfile".5" | paste -s | tr '\t' ',')
			band=$(cut -f 2 $tempfile".5" | paste -s | tr '\t' ',')
			subject=$(cut -f 3 $tempfile".5" | paste -s | tr '\t' ',')
		fi
	else
		echo -e "$PURPLE--- Warning ["$thisprog"]: no matching .yaml file \n\t- using file-characteristics & defaults for some parameters$NC" >&2
	fi

	# calculate max dat value based on bit-depth and assuming signed integers
	datmax=$(echo "2^($bit_depth-1)-1" | bc)

	echo "file_source= "$filesource
	echo "file_config= "$fileyaml
	echo "experiment= "$setexpt
	echo ""
	echo "subject= "$subject
	echo "session= "$session
	echo "device= "$device
	echo "band= "$band
	echo ""
	echo "start_date= "$start_date
	echo "start_time= "$start_time
	echo "stop_date= "$stop_date
	echo "stop_time= "$stop_time
	echo "duration= "$duration
	echo ""
	echo "datinvalid= "$datinvalid
	echo "sample_rate= "$sample_rate
	echo "n_channels= "$n_channels
	echo "datbits= "$datbits
	echo "datmax= "$datmax
	echo "filt_low= "$setfiltlow
	echo "filt_high= "$setfilthigh
	echo ""
	echo "filename_field_id= "$coldev
	echo "filename_field_alias= "$colalias
	echo "filename_field_year= "$colyear
	echo "filename_field_month= "$colmonth
	echo "filename_field_day= "$colday
	echo "filename_field_inc= "$colinc
	if [ "$filext" != "yaml" ] ; then
		echo "ldas_basename= "$date1"-"$session"_"$subject
	fi


#-------------------------------------------------------------------------------
elif [ "$setmode" == "plot" ] ; then

	list=$(ls *.dat)
	plotlist=""
	for in1 in $list ; do

		out1="out_"$tempfile".config" # can't be tempfile, because xs-TAINI-tools will delete!
		xs-TAINI-tools config --file $in1 > $out1

		subject=$(grep subject= $out1 | awk '{print $2}')
		band=$(grep band= $out1 | awk '{print $2}')
		dev=$(grep device= $out1 | awk '{print $2}')
		start_time=$(grep start_time= $out1 | awk '{print $2}')
		start_date=$(grep start_date= $out1 | awk '{print $2}')
		sample_rate=$(grep sample_rate= $out1 | awk '{print $2}')
		n_channels=$(grep n_channels= $out1 | awk '{print $2}')

		# DETERMINE WHAT TO USE AS THE CHANNEL-TABLE
		x="table_channels_"$subject".txt"
		y="table_channels_template.txt"
		if [ "$filenotes" != "" ] ; then table=$filenotes
		elif [ -e $x ] ; then table=$x
		elif [ -e $y ] ; then table=$y
		else table=$template_channels
		fi
		echo "plotting using channel-table: $table"

		# DETERMINE START-TIME: 5 SECONDS BEFORE THE END OF THE FILE
		opts1="-c good -f $sample_rate -l 10 -h 0 -w 1 -m 0 -v 0 -d 1000 -t $table"
		start=$(xe-filesize1 $in1 -sf $sample_rate -dt 2 -nch $n_channels | xe-getkey2 stdin nseconds= | awk '{a=$1-5.0; if(a<0.0) a=0; print a}')

		plotfile="plot_"$tempfile"_"$in1".ps"
		plotlist=$plotlist" "$plotfile
		title=$start_date"_"$start_time"_"$in1"_band:"$band"_device:"$dev
		if [ "$setverb" == "1" ] ; then echo -e "\nxs-ldas5-plotdata1 $in1 $opts1 -a $start -P \"-yscale .25 -frame 15 -title $title -out $plotfile\"" ; fi
		xs-ldas5-plotdata1 $in1 $opts1 -s $start -P "-yscale .25 -frame 15 -title $title -out $plotfile" &>/dev/null
	done

	xe-plotmerge1 -xmax 1 -ymax 4 $plotlist
	rm -f $plotlist
	xe-plotmerge2 temp_xe-plotmerge1.*.ps > $fileplot
	rm -f temp_xe-plotmerge1.*.ps
	evince $fileplot &


#-------------------------------------------------------------------------------
elif [ "$setmode" == "unrename" ] ; then

	listyaml=$(ls *configuration.yaml 2> /dev/null)
	if [ "$listyaml" == "" ] ; then echo -e "\n$RED--- Error ["$thisprog"]: no .yaml files - cannot restore filenames$NC\n" ; exit ; fi

	# REPAIR THE YAML FILES IF THEY HAVE BEEN MODIFIED
	for in1 in $listyaml ; do

		# fix the filename template - note - assumes the correct format is TAINI_$ID_$ALIAS-%Y_%m_%d-$INC.dat
		oldtemplate=$(grep filename_template: $in1 | awk '{print $2}')
		newtemplate='TAINI_$ID_$ALIAS-%Y_%m_%d-$INC'
		xe-cut2 $in1 "recording:" > $tempfile".0"
		xe-strsub1 $tempfile".0" $oldtemplate $newtemplate > $tempfile".x"
		let z=$(cat $tempfile".x" | wc -l)
		if [ $z -lt 1 ] ; then echo -e "\n$RED--- Error ["$thisprog"]: \"recording:\" section in $in1 is empty - cannot proceed $NC\n" ; exit ; fi

		# initialize the temporary yaml output
		echo "transmitters:" > $tempfile".yaml"
		# repair the name for each device
		date1=$(grep " start_datetime:" $in1 --color=never | awk '{print $2}' | tr '-' '_')
		listdevid=$(grep -- "- id:" $in1 | awk '{print $3}')

		for devid in $listdevid ; do
			xe-cut2 $in1 "- id: $devid" -s4 1 > $tempfile.$devid
			let z=$(cat $tempfile.$devid | wc -l)
			if [ $z -lt 1 ] ; then echo -e "\n$RED--- Error ["$thisprog"]: device section \"- id: dev$devid\" in $in1 is empty - cannot proceed $NC\n" ; exit ; fi

			oldname=$(grep output_destination: $tempfile.$devid | awk -F / '{print $NF}')
			# DETERMINE CORRECT $INC VALUE _ SHOULD BE 4-DIGITS
			# depends on if filename in yaml is ldas or taini format
			let z=$(echo $oldname | grep TAINI | wc -l)
			if [ $z -eq 1 ] ; then
				inc=$(echo $oldname | awk -F [-_.] '{x=$(NF-1) ; printf("%04d",x)}')
			else
				inc=$(echo $oldname | awk -F [-_.] '{x=$2 ; printf("%04d",x)}')
			fi
			# DETERMINE CORRECT DEVICE-NAME, ALIAS AND DATE
			dev=$(grep   " id:" $tempfile.$devid --color=never | rev | cut -c 1 | awk '{printf("D%03d",$1)}')
			alias=$(grep " alias:" $tempfile.$devid --color=never | awk '{print $2}')
			newname="TAINI_"$dev"_"$alias"-"$date1"-"$inc".dat"
			xe-strsub1 $tempfile.$devid $oldname $newname >> $tempfile".yaml"
		done
	done
	# add the bottom, with repaired filename template
	cat $tempfile".x" >> $tempfile".yaml"
	# replace the original yaml
	mv $tempfile".yaml" $in1

	# UN-RENAME THE .YAML FILES
	for in1 in $listyaml ; do
		# pull out first output dat-file referred to the yaml - this will have ben the file name template for the original yaml
		out1=$(grep --color=never  output_destination: $in1 -m 1 | awk -F / '{print $NF}' | cut -f 1 -d . | awk '{print $1"_configuration.yaml"}')
		if [ "$out1" != "" ] ; then
			if [ $in1 != $out1 ] ; then mv $in1 $out1 -iv ; fi
		else
			echo -e "\n$RED--- Error ["$thisprog"]: no output entries in $in1 $NC\n" ; exit
		fi
	done

	# UN-RENAME THE .DAT AND .SYNC FILES
	listin1=$(ls 20??????-*_*.dat 2>/dev/null)
	if [ "$listin1" == "" ] ; then echo -e "\n$RED--- Error ["$thisprog"]: no LDAS-format .dat files - perhaps the files were not yet renamed$NC\n" ; exit ; fi
	rm -f $tempfile".1"
	rm -f $tempfile".2"
	for in1 in $listin1 ; do
		date1=$(xs-ldas-parsename $in1 date -f)
		session1=$(xs-ldas-parsename $in1 session -f)
		subject1=$(xs-ldas-parsename $in1 subject -f)
		year1=$(echo $date1 | cut -c 1-4)
		month1=$(echo $date1 | cut -c 5-6)
		day1=$(echo $date1 | cut -c 7-8)
		date2=$year1"_"$month1"_"$day1
		# output filename is the .yaml entry matching on date, session and subject
		out1=$(grep "output_destination:" *configuration.yaml | awk -F / '{print $NF}' | tr -d ' ' | grep -- "_"$subject1 | grep -- "-"$date2 | grep -- "-"$session1)
		let z=$(echo $out1 | wc -w)
		if [ $z -eq 0 ] ; then echo -e "\n$RED--- Error ["$thisprog"]: no .yaml entries matching $in1 $NC\n" ; exit ; fi
		if [ $z -gt 1 ] ; then echo -e "\n$RED--- Error ["$thisprog"]: more than one .yaml entry matching $in1 $NC\n" ; exit ; fi
		# build the rename pairs
		echo $in1 >> $tempfile".1"
		echo $out1 >> $tempfile".2"
	done
	# build old/new filnemae list - generate matching .sync file names on the fly
	paste $tempfile".1" $tempfile".2" |
		while read in1 out1 ; do
			in2=$(echo $in1 | xe-strsub1 stdin .dat .sync)
			out2=$(echo $out1 | xe-strsub1 stdin .dat .sync)
			mv $in1 $out1 -iv
			mv $in2 $out2 -iv
	done


#-------------------------------------------------------------------------------
else
	{ echo -e "\n$RED--- Error ["$thisprog"]: invalid mode ($setmode)$NC\n" ; exit; }
fi


################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi
exit
