#!/bin/bash
# <TAGS> MAESTRO </TAGS>

################################################################################
# INTIAL VARIABLE DEFINITIONS
################################################################################
# for most scripts...
thisprog=`basename "$0"`
allopts=$@
tempfile="temp_"$thisprog #"."$$"."
startdir=$(pwd)
starttime=$(date +'%s.%3N')
date0=$(date)

setverb="1"
setclean="1"
setwell="0"
setnames=""
setadj="0.01"
sett1="0.001"

# colours for use with text printed to terminal
RED='\033[0;31m'	# for errors
PURPLE='\033[0;35m'	# for warnings
GREEN='\033[0;32m'	# for interactive text requiring input
NC='\033[0m' 		# to revert to default text colour


################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": per-electrode analysis for MAESTRO data"
	echo "USAGE: $thisprog [list] [options]"
	echo "	[list]:  quoted list of MAESTRO .csv files (wildcards allowed)"
	echo "		- NOTE: should be in alphanumeric order"
	echo "		- NOTE: first file should be the baseiline"
	echo "VALID OPTIONS (defaults in []):"
	echo "	--t1: electrode inclusion: minimum firing-rate on any trial [$sett1]"
	echo "	--adj: adjustment added to firing-rates to avoid ratio-extremes [$setadj]"
	echo "	--names: file defining group-names [$setnames]"
	echo "		- if unset, generated from baseline treatments"
	echo "	--verb: verbose output (0=NO 1=YES) [$setverb]"
	echo "	--clean: remove temporary files (0=NO 1=YES) [$setclean]"
	echo "EXAMPLE: "
	echo "	$thisprog \"*.csv\" --t1 0.5 --adj 0.1 "
	echo "OUTPUT:"
	echo "	out_"$thisprog"_1.txt: rates, for electrodes passing --t1"
	echo "	out_"$thisprog"_2.txt: from above, rates adjusted (--adj): group,trial,%change"
	echo "	plot_"$thisprog"_1.ps: summary plot"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi


########################################################################################
# INPUT FILE(S) AND REQUIRED ARGUMENT HANDLING
########################################################################################
listinfiles=$(ls $1 2>/dev/null)
let ninfiles=$(echo $listinfiles | wc -w)
if [ $ninfiles -lt 1 ] ; then { echo -e "\n--- Error ["$thisprog"]: no files found matching \"$1\"\n" ;  exit; } ; fi
shift

########################################################################################
# OPTIONAL ARGUMENT HANDLING
########################################################################################
vs="v:c:" ; vl="adj:,t1:,well:,names:,verb:,clean:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo -e "\n--- Error ["$thisprog"]"$y"\n" ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		--adj ) setadj=$2 ; shift ;;
		--t1 ) sett1=$2 ; shift ;;
		--names ) setnames=$2 ; shift ;;
		--clean ) setclean=$2 ; shift ;;
		--verb ) setverb=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" ;  exit; } ; fi
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" ;  exit; } ; fi

if [ "$setclean" == "1" ] ; then
	rm -f "out_"$thisprog""*
	rm -f "plot_"$thisprog""*
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi

########################################################################################
# BUILD THE TREATMENT LIST FROM THE BASELINE FILE
########################################################################################
if [ "$setnames" != "" ] ; then
	if [ ! -f "$setnames" ] ; then
		echo -e "\n--- Error ["$thisprog"]: names-table file (--name $setnames) not found\n"
		exit
	else cp $setnames "out_"$thisprog"_groups.txt"
	fi
else
	in1=$(echo $listinfiles | cut -f 1 -d ' ')
	xe-cut2 $in1 "Well Information" -s3 "Analysis" | 
		awk -F , '$1=="Treatment"{for(i=2;i<=NF;i++) {if($i!="") print $i}}' |
		tr ' ' '_' > $tempfile
	
	# make two sorted lists, with vehicles or controls at the top 
	grep -Ei 'vehicle|control' $tempfile | sort -u > $tempfile.1
	grep -Eiv 'vehicle|control' $tempfile | sort -u > $tempfile.2
	
	cat $tempfile.1 $tempfile.2 |
		awk 'BEGIN{grp=0; print "group\tname"}
		{
		print ++grp"\t"$1
		}' > "out_"$thisprog"_groups.txt"
fi
if [ "$setverb" == "1" ] ; then 
	echo -e "\n\tTreatment Groups:"
	cat "out_"$thisprog"_groups.txt" | awk '{print "\t"$0}' ; 
	echo 
fi 

########################################################################################
# PROCESS EACH INPUT FILE
########################################################################################
let count=-1
outlist=""
for in1 in $listinfiles ; do

	let count=$count+1
	if [ "$setverb" == "1" ] ; then echo -e "\t"$in1 ; fi 
	dos2unix -q $in1

	# build wells file

	awk -F , '$1=="Well"{for(i=2;i<=NF;i++) print $i}' $in1 > $tempfile.1
	awk -F , '$1=="Treatment"{for(i=2;i<=NF;i++) {x=$i; if(x=="") x="-"; print x}}' $in1 |
		tr ' ' '_' > $tempfile.2
	echo -e "wellno\twell\ttreat" > $tempfile".wells"
	paste $tempfile.1 $tempfile.2 | awk 'BEGIN{n=0}{print ++n"\t"$0}' >> $tempfile".wells"

	# build electrode file
	# - we need to be careful here because two fields match "Mean Firing Rate (Hz)"
	# - only take the line which follows "Measurement"
	awk -F , '$1=="Measurement"{for(i=2;i<=NF;i++) print $i}' $in1 | tr '_' '\t' > $tempfile.1
	xe-cut2 $in1 Measurement -s3 "ISI Coefficient of Variation" |
		tail -n 1 |
		awk -F , '{for(i=2;i<=NF;i++) {x=$i; if(x=="") x="-"; print x}}' > $tempfile.2

	echo -e "elno\twell\tel\trate" > $tempfile".electrodes"
	paste $tempfile.1 $tempfile.2 | awk 'BEGIN{n=0}{print ++n"\t"$0}' >> $tempfile".electrodes"

	# add treatment & wellno to electrode & firingrate
	xe-dbmatch2 $tempfile".electrodes" well $tempfile".wells" treat |
		xe-dbmatch2 stdin well $tempfile".wells" wellno > $tempfile".3"

	# generate outfile for this infile
	outfile=$tempfile"_out."$count
	outlist=$outlist" "$outfile

	if [ $count -eq 0 ] ; then
		xe-cut1 $tempfile".3" well,el,wellno,elno,treat,rate |
		xe-strsub1 stdin "rate" "rate_"$count > $outfile
	else
		xe-cut1 $tempfile".3" rate |
		xe-strsub1 stdin "rate" "rate_"$count > $outfile

	fi

done

paste $outlist |
	# apply any-trial activity criterion
	awk 'BEGIN{n=0}{
		n++
		if(n==1) print $0"\tgood"
		else {
			g=0
			for(i=6;i<=NF;i++) { if($i>='$sett1')g=1 }
			print $0"\t"g
		}
	}' |

	# add group-numbers
	xe-dbmatch2 stdin treat "out_"$thisprog"_groups.txt" group -k name > $tempfile


# reorder columns for readability
listcols1a="well,el,wellno,elno,treat,group,good"
listcols1b=$(head -n 1 $tempfile | tr '\t' '\n' | grep rate_ --color=never | paste -s | tr '\t' ',')
xe-cut1 $tempfile $listcols1a","$listcols1b >  "out_"$thisprog"_1.txt"

echo
echo -e "\toutput sent to: out_"$thisprog"_1.txt"


################################################################################
# NOW MAKE A NORMALIZED DATA FRAME
################################################################################
in1="out_"$thisprog"_1.txt"
list=$(head $in1 -n 1 | tr '\t' '\n' | grep rate_ | paste -s | tr '\t' ',')
# OUTPUT %CHANGE, ADJUSTED TO BASELINE+1
xe-dbmatch1 $in1 good 1 |
	xe-cut1 stdin group,$list |
	awk 'BEGIN{n=0; adj='$setadj'; print "group\ttrial\t%change"}
	{
		if(++n>1) {
			g=$1
			b=$2+adj;
			for(i=3;i<=NF;i++) print g"\t"(i-2)"\t"($i+adj)/b
		}
	}' > "out_"$thisprog"_2.txt"

echo -e "\toutput sent to: out_"$thisprog"_2.txt"

# MAKE AN UN-NORMALIZED MATRIX
blank=$(echo $listcols1b | tr ',' '\t' | xe-strsub2 stdin 'NAN\t' | tr -d ' ' | tr -d '\t')
in1="out_"$thisprog"_1.txt"

xe-dbmatch1 $in1 good 1 |
	xe-cut1 stdin group,$listcols1b -o 1 |
	sort -k1,1n -k2,2nr |
	awk '{if($1!=prev) print ""; prev=$1; print $0;}' |
	cut -f 2- |
	xe-math_add1 stdin -v $setadj |
	awk '{if($1!="")print $0; else for(i=0;i<3;i++) print "'$blank'"}' > $tempfile".matrix1"

# MAKE NORMALIZED MATRICES
xe-normrow2 $tempfile".matrix1" -norm 4 -start 0 -stop 1 > $tempfile".matrix2" 2> /dev/null
xe-normrow2 $tempfile".matrix1" -norm 2 -start 0 -stop 1 > $tempfile".matrix3" 2> /dev/null


# MAKE A MEDIANS FILE - CURRENTLY UNUSED
in1="out_"$thisprog"_2.txt"
listgroups=$(xe-cut1 "out_"$thisprog"_2.txt" group -o 1 | sort -nu )
listtrials=$(xe-cut1 "out_"$thisprog"_2.txt" trial -o 1 | sort -nu )
echo -e "group\ttrial\t%change_median" > $tempfile"_norm_median"
for group in $listgroups ; do
for trial in $listtrials ; do
	xe-dbmatch1 $in1 group $group |
	xe-dbmatch1 stdin trial $trial |
	xe-statsd1 stdin -per 1 |
	xe-getkey stdin PERCENTILE_50 |
	awk '{print "'$group'\t'$trial'\t"$1}' >> $tempfile"_norm_median"
done
done



################################################################################
# PLOT THE RESULTS
################################################################################
# PLOT MEANS
in1="out_"$thisprog"_2.txt"
plotfile="plot_norm_1.ps"
plotlist=$plotlist" "$plotfile
xs-plotmeans3 $in1 trial group %change -x "Trial" --name2 "out_"$thisprog"_groups.txt" --out $plotfile

# PLOT RAW DATA
in1="out_"$thisprog"_2.txt"
plotfile="plot_norm_2.ps"
plotlist=$plotlist" "$plotfile
plotopts="-cx 2 -cy 3 -cg 1 -xint 1 -pf 0 -ps 3 -lb 2  -line 1 -lwd .25 -hline 1"
xe-plottable1 $in1 $plotopts -xlabel "Trial" -ylabel "%Change (+$setadj)" -legend 1 -out $plotfile
xs-plotmod1 $plotfile --legend "out_"$thisprog"_groups.txt" --out 1


################################################################################
# MATRIX PLOTS
let xmin=0
let xmax=$(echo $listcols1b | tr ',' ' ' | wc -w)
plotopts="-xmin $xmin -xmax $xmax -xint 1 -yint -1"

# RATES (ADJUSTED BY --adj)
plotfile="plot_matrix_1.ps"
plotlist=$plotlist" "$plotfile
xe-plotmatrix1 $tempfile".matrix1" $plotopts -title "Rate (Hz)" -xlabel "Trial" -ylabel "Group x Base-rate" -out $plotfile

# %CHANGE FROM BASELINE
plotfile="plot_matrix_2.ps"
plotlist=$plotlist" "$plotfile
xe-plotmatrix1 $tempfile".matrix2" $plotopts -title "%Change" -xlabel "Trial" -ylabel "Group x Base-rate" -out $plotfile

# DIFFERENCE FROM BASELINE
plotfile="plot_matrix_3.ps"
plotlist=$plotlist" "$plotfile
xe-plotmatrix1 $tempfile".matrix3" $plotopts -title "Rate-difference (Hz)" -xlabel "Trial" -ylabel "Group x Base-rate" -out $plotfile

xe-plotmerge1 $plotlist -xo 100 -xmax 2 -xinc 280 -yinc 250
mv "temp_xe-plotmerge1.001.ps" "plot_"$thisprog"_1.ps"
echo -e "\toutput sent to: plot_"$thisprog"_1.ps"


################################################################################
# R_STATS
################################################################################
# CHECK IF DEPENDENCY IS INSTALLED - EG PANDOC
if [ "$(command -v R)" != "" ] ; then
	awk 'BEGIN{n=0}{if($2==1)n++; print $0"\t"n}' "out_"$thisprog"_2.txt" | tail -n +2 > $tempfile
	xs-R_anova_rc $tempfile 3 4 2 -b 1
fi



################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
	rm -f $plotlist

fi
exit
