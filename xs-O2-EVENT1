#!/bin/bash
# <TAGS> O2 signal_processing detect</TAGS>

# cd /home/yex7906/Projects/2015_01_09_CholineTranisient/Data_Working/008-141201
# align data to injection with no filtering or binning
# xs-O2-X1 008-141201 R MPFC -s Inj1 -p 1800 -N 120 -d 10800 -i 0 -f 0

# ALSO INTERPOLATE THE DATA - CONSIDER DOING THIS IN DATA TRANSFER PHASE

thisprog=`basename "$0"`
tempfile="temp_"$thisprog #"."$$"."
rm -f $tempfile*
outbase="EVENT1_"
rm -f $outbase*

# default options for block alignment using for xe-align2
set_start="Start"
set_pre="10"
set_post="10"
set_thresh="1.5"
set_upper="1000"
set_edge="0.5"
set_sign="1"
set_z="1"

set_min="60"
set_max="600"
set_low="0"
set_high="0"
set_filtertype_low="1"
set_filtertype_high="0"
set_plot="1"


if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": detect & characterize transient events in a time series"
	echo "	Specifically designed for very slow (minutes) events, this program uses"
	echo "	Data is interpolated first to remove non-finite or non-numeric entries"
	echo "	Box-car smoothing and de-meaning may be used instead of a Butterworth filter"
	echo "		(sometimes more stable for analyzing very low-frequencies)"
	echo "USAGE: "$thisprog" [base] [hem] [region] [options]"
	echo "	[base]: base-name [subject]-[yymmdd]"
	echo "	[hem]: hemisphere (L or R)"
	echo "	[region]: brain region (e.g. DHIPP, MPFC)"
	echo "		Note: [hem] & [region] are matched against .notes file"
	echo "		CHANNEL records to identify the correct .dat file for that channel"
	echo "	[options] (defaults in []) :"
	echo "		-i: shortest event (seconds) to detect [$set_min]"
	echo "		-j: longest event (seconds) to detect [$set_max]"
	echo ""
	echo "		-t: detection threshold (standard deviations) [$set_thresh]"
	echo "		-u: upper limit for event peak (standard deviations) [$set_upper]"
	echo "		-e: detection for edges of events (fraction of -t) [$set_edge]"
	echo "		-g: sign of threshold (-1=neg, 1=pos, 0=either) [$set_sign]"
	echo "		-z: convert data to Z-scores for detection (0=NO 1=YES) [$set_z]"
	echo ""
	echo "		-s: unique start-signal dividing pre- and post-analysis blocks ["$set_start"]"
	echo "		-p: (lower-case) pre-start time to analyze (seconds) ["$set_pre"]"
	echo "		-d: post-start time to analyze (seconds) ["$set_post"]"
	echo ""
	echo "		-f: low-cut filter method (0=Butterworth, 1=boxcar de-mean) ["$set_filtertype_low"]"
	echo "		-F: high-cut filter method (0=Butterworth, 1=boxcar smooth) ["$set_filtertype_high"]"
	echo "		-h: high-cut frequency (0=auto, determined by -i) [$set_high]"
	echo ""
	echo "		-P: (upper-case) plot the data (0=NO 1=YES) ["$set_plot"]"
	echo "EXAMPLE: "
	echo "	"$thisprog" rat002-101116 R MPFC -s Inj1 -p 7200 -d 7200 -t 1 "
	echo "OUTPUT: average response curve in format [time] [value]"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi

# SAVE AND PRINT THE COMMAND LINE
command_line=$@
echo ; echo $thisprog $command_line ; echo "----------------------------------------"
echo $thisprog $command_line > $outbase".log"

# READ THE REQUIRED COMMAND-LINE ARGUMMENTS
base=$1; shift
hemis=$1; shift
region=$1; shift
opts=$@

################################################################################
# READ OPTIONAL ARGUMENTS
################################################################################
while getopts  ":t:u:e:g:i:j:h:s:p:d:P:f:F:z:" flag ; do
	case $flag in
		t) set_thresh=$OPTARG;;
		u) set_upper=$OPTARG;;
		e) set_edge=$OPTARG;;
		g) set_sign=$OPTARG;;
		z) set_z=$OPTARG;;
		i) set_min=$OPTARG;;
		j) set_max=$OPTARG;;
		h) set_high=$OPTARG;;
		s) set_start=$OPTARG;;
		p) set_pre=$OPTARG;;
		d) set_post=$OPTARG;;
		P) set_plot=$OPTARG;;
		f) set_filtertype_low=$OPTARG;;
		F) set_filtertype_high=$OPTARG;;
		\?) { echo ; echo "--- Error ["$thisprog"]: invalid option -$OPTARG" ; echo ; exit; }
	esac
	let lastarg=$OPTIND-1
done
if [ ! $lastarg ] ; then lastarg=0; fi
for i in $(seq 1 $lastarg); do shift ; done



################################################################################
# CHECK VALIDITY OF OPTIONAL ARGUMENTS AND BUILD FILENAMES AND BASIC VARIABLES
################################################################################
if [ $set_filtertype_low != "0" ] && [ $set_filtertype_low != "1" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid -f ("$set_filtertype_low") - must be 0 or 1" ; echo ; echo ; exit ; } ; fi
if [ $set_filtertype_high != "0" ] && [ $set_filtertype_high != "1" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid -F ("$set_filtertype_high") - must be 0 or 1" ; echo ; echo ; exit ; } ; fi
if [ $set_z != "0" ] && [ $set_z != "1" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid -z ("$set_z") - must be 0 or 1" ; echo ; echo ; exit ; } ; fi

subject=$(echo $base | cut -f 1 -d "-")
yymmdd=$(echo $base | cut -f 2 -d "-")
if [ -z "$subject" ] ; then { echo ; echo "--- Error ["$thisprog"]: bad base-name format ($base)" ; echo ; exit ; } fi
if [ -z "$yymmdd" ] ; then { echo ; echo "--- Error ["$thisprog"]: bad base-name format ($base)" ; echo ; exit ; } fi

# BUILD THE NOTES FILENAME - CHECK THEY ARE PRESENT
notesfile=$base".notes" ; if [ ! -e $notesfile ] ; then { echo ; echo "--- Error ["$thisprog"]: file '$notesfile' missing" ; echo ; echo ; exit ; } ; fi

# MAKE SURE A VALID HEMISPHERE WAS SPECIFIED
if [ $hemis != "L" ] && [ $hemis != "R" ] ; then { echo ; echo "--- Error ["$thisprog"]: invalid hemisphere ("$hemis") - must be L or R" ; echo ; echo ; exit ; } ; fi

# IDENTIFY THE CHANNEL ASSOCIATED WITH THE SPECIFIED HEMISPHERE AND BRAIN REGION
channel=$(awk '$1=="CHANNEL"&&$4=="'$hemis'"&&$5=="'$region'"{printf("%03d",$2)}' $notesfile)
if [ -z $channel ] ;  then { echo ; echo "--- Error ["$thisprog"]: notes file has no CHANNEL specifying hemisphere \""$hemis"\" and region \""$region"\"" ; echo ; echo ; exit ; } ; fi

# GET THE SAMPLE FREQUENCY (SAMPLE_RATE IN THE NOTES FILE)
sample_freq=$(xe-getkey $notesfile SAMPLE_RATE)
if [ -z $sample_freq ] ; then { echo ; echo "--- Error ["$thisprog"]: notes file "$notesfile" is missing SAMPLE_RATE keyword" ; echo ; echo ; exit ; } ; fi

# BUILD THE TIME, DATA AND COMMENT FILE NAMES
timefile=$base".time" ; if [ ! -e $timefile ] ; then { echo ; echo "--- Error ["$thisprog"]: file '$timefile' missing" ; echo ; echo ; exit ; } ; fi
infile=$base"."$channel".dat" ; if [ ! -e $infile ] ; then { echo ; echo "--- Error ["$thisprog"]: file '$infile' missing" ; echo ; echo ; exit ; } ; fi
if [ "$set_comfile" ] ; then cmtfile=$set_comfile ; else cmtfile=$base"."$channel".cmt" ; fi
if [ ! -e $cmtfile ] ; then { echo ; echo "--- Error ["$thisprog"]: file '$cmtfile' missing" ; echo ; echo ; exit ; } ; fi


################################################################################
# FILTER SETTINGS
################################################################################
# DETERMINE BUTTERWORTH FILTER LOW AND HIGH CUT-OFFS
if [ $set_low == "0" ] ; then set_low=$(echo $set_max | awk '{print 1.0/$1}')   ;  fi
if [ $set_high == "0" ] ; then set_high=$(echo $set_min | awk '{print 1.0/$1}')   ;  fi



################################################################################
# CONVERT TIMES TO SAMPLE-NUMBERS IN FILE
# DE_MEANING, DETECTION AND ALIGNMENT PROGRAMS RECEIVE DATA WITH NO TIMESTAMPS
# HENCE SAMPLE-NUMBERS ARE REQUIRED
################################################################################

# DETERMINE SAMPLE-COUNTS (MIN,MAX) FOR EVENT DETECTION
smin=$(echo $set_min $sample_freq | awk '{print $1*$2}')
smax=$(echo $set_max $sample_freq | awk '{print $1*$2}')

# CALCULATE THE PRE-SAMPLE PERIOD IN MINUTES
preminutes=$(echo $set_pre | awk '{print $1/-60.0}')
postminutes=$(echo $set_post | awk '{print $1/60.0}')

# DETERMINE THE SAMPLE-NUMBER FOR THE ALIGNMENT START-TIME
x=$(grep $set_start $cmtfile | awk '{print $1}')
# test that there is exactly one comment matching the specified start signal
let y=$(echo $x | wc -w)
if [ $y -lt 1 ] ; then { echo ; echo "--- Error ["$thisprog"]: start-signal \"$set_start\" not found" ; echo ; echo ; exit ; } ; fi
if [ $y -gt 1 ] ; then { echo ; echo "--- Error ["$thisprog"]: start-signal \"$set_start\" not unique" ; echo ; echo ; exit ; } ; fi
# get the first timestamp & calculate sample-offset of start-signal
y=$(head -n 1 $timefile )
let sstart=$(echo $y $x $sample_freq | awk '{printf("%ld\n",(($2-$1)*$3))}')
let secstart=$(echo $y $x | awk '{printf("%ld\n",(($2-$1)))}')

# DETERMINE THE SAMPLE-NUMBER FOR SPLITTING DATA ACCORDING TO PRE-TIME AND POST-TIME
# determine the length of the pre-start period in samples
let sprelen=$(echo $set_pre $sample_freq | awk '{printf("%ld\n",($1*$2))}')
# determine the length of the post-start period in samples
let spostlen=$(echo $set_post $sample_freq | awk '{printf("%ld\n",($1*$2))}')

# determine the sample-number for the pre-time boundary
let spre=$(echo $sstart $sprelen | awk '{printf("%ld\n",($1-$2))}')
if [ $spre -lt 0 ] ; then { echo ; echo "--- Error ["$thisprog"]: pre-time \"$set_pre\" references a time before the beginning of the recording" ; echo ; echo ; exit ; } ; fi

# determine the sample-number for the post-time boundary
let spost=$(echo $sstart $spostlen | awk '{printf("%ld\n",($1+$2))}')
# #determine the highest sample-number in the file
let z=$(wc -l $timefile | awk '{print $1-1}')
if [ $spost -gt $z ] ; then { echo ; echo "--- Error ["$thisprog"]: post-time \"$set_post\" references a time beyond the end  of the recording" ; echo ; echo ; exit ; } ; fi


echo "tempfile="$tempfile
echo "outbase="$outbase
echo "timefile="$timefile
echo "infile="$infile
echo "cmtfile="$cmtfile
echo "sample_freq="$sample_freq
echo "set_min="$set_min
echo "set_max="$set_max
echo "smin="$smin
echo "smax="$smax
echo "sprelen="$sprelen
echo "spre="$spre
echo "spostlen="$spostlen
echo "spost="$spost
echo "sstart="$sstart
echo "set_thresh="$set_thresh
echo "set_edge="$set_edge
echo "set_upper="$set_upper
echo "set_filtertype_low="$set_filtertype_low
echo "set_filtertype_high="$set_filtertype_high
echo "set_low="$set_low
echo "set_high="$set_high
echo "set_z="$set_z


################################################################################
# MAKE AN ALIGNED COPY OF THE DATA  - no binning
# 1. interpolate
# 2. align to the start-signal
################################################################################
echo "	Making aligned trace..."
echo "	cat $infile |
		xe-interp1 stdin |
		xe-align2 stdin  $tempfile".start" -dt -1 -pre $sprelen -post $spostlen -sf $sample_freq |
		cut -f 2 > $outbase"trace_aligned.txt"
"
echo $sstart > $tempfile".start"
cat $infile |
	xe-interp1 stdin |
	xe-align2 stdin  $tempfile".start" -dt -1 -pre $sprelen -post $spostlen -sf $sample_freq |
	cut -f 2 > $outbase"trace_aligned.txt"


################################################################################
# MAKE A FILTERED VERSION OF THE ALIGNED DATA AND CONVERT TO Z-SCORES
# 1. box-car smooth (low-pass filter)
# 2. de-mean (high-pass filter)
# 3. convert to z-scores (subtract overall mean and divide by standard deviation
################################################################################
if [ $set_filtertype_low == "0" ] ; then
	comlow="xe-filter_butterworth1 stdin -sf $sample_freq -low $set_low -pad -1 -m 1 -res 1 "
else
	comlow="xe-demean1 stdin $smax"
fi
if [ $set_filtertype_high == "0" ] ; then
	comhigh="xe-filter_butterworth1 stdin -sf $sample_freq -high $set_high -pad -1 -m 1"
else
	halfwin=$(echo $smin | awk '{printf("%ld",($1/2.0))}')
	comhigh="xe-smoothbox1 stdin $halfwin"
fi

if [ $set_z == "0" ] ; then z="-1" ; else z="1" ; fi
echo "	Making filtered trace..."
echo "	cat $outbase"trace_aligned.txt" |
		$comlow  |
		$comhigh |
		xe-norm2 stdin -n $z > $outbase"trace_filtered.txt"
"
cat $outbase"trace_aligned.txt" |
	$comlow  |
	$comhigh |
	xe-norm2 stdin -n $z > $outbase"trace_filtered.txt"


################################################################################
# DO THE DETECTION - OUTPUT EVENTS.TXT
################################################################################
echo "	Detecting events..."
echo "	xe-detectevents1 $outbase"trace_filtered.txt" -t $set_thresh -u $set_upper -e $set_edge -s $set_sign -min $smin -max $smax"
xe-detectevents1 $outbase"trace_filtered.txt" -t $set_thresh -u $set_upper -e $set_edge -s $set_sign -min $smin -max $smax |
	xe-cut1 stdin start,peak,stop -o 1 > $tempfile.0

# OUTPUT EVENT-SAMPLES IN FORMAT [start] [peak] [stop] - SORT INTO PRE AND POST SUBSETS
awk '$2<='$sprelen' {print $0}' $tempfile.0 > $tempfile.evt.1
awk '$2>'$sprelen'  {print $0}' $tempfile.0 > $tempfile.evt.2

# CONVERT EVENT-SAMPLES TO SECONDS (RELATIVE TO START-SIGNAL)
outfile=$outbase"events.txt"
echo "block start peak stop length" | xe-delimit stdin > $outfile
cat $tempfile.evt.1 |
	xe-math_div1 stdin -cy -1 -v $sample_freq | # convert to seconds
	xe-math_add1 stdin -cy -1 -v -$set_pre | # adjust by pre-start time
	awk '{print "1",$1,$2,$3,($3-$1)}' | # calculate length of event
	xe-delimit stdin >> $outfile
cat $tempfile.evt.2 |
	xe-math_div1 stdin -cy -1 -v $sample_freq | # convert to seconds
	xe-math_add1 stdin -cy -1 -v -$set_pre | # adjust by start-signal time
	awk '{print "2",$1,$2,$3,($3-$1)}' | # calculate length of event
	xe-delimit stdin >> $outfile


################################################################################
# ALIGN THE RAW ALIGNED DATA TO THE PEAK OF EACH EVENT
# - output average.txt
# - output change.txt
################################################################################
echo "	Calculating  mean-event parameters..."
outfile=$outbase"average.txt"
echo "block time mean" | xe-delimit stdin > $outfile
for i in 1 2 ; do

	echo "
	cut -f 2 $tempfile.evt.$i > $tempfile
	xe-align2 $outbase"trace_aligned.txt" $tempfile -dt -1 -sf $sample_freq -pre $smax -post $smax -norm 5 -nbins 101  |
		awk '{print "'$i'\\t",$0}' >> $outfile
	"

	# make a temporary event-sample (peak) file for the current block
	cut -f 2 $tempfile.evt.$i > $tempfile
	# align to events and output the average event (downsample to 101 values)
	xe-align2 $outbase"trace_aligned.txt" $tempfile -dt -1 -sf $sample_freq -pre $smax -post $smax -norm 5 -nbins 101  |
	# add a number specifying the block
	awk '{print "'$i'\t",$0}' >> $outfile




done

# split the output
awk '$1=="1"{print $0}' $outfile > $tempfile.avg.1
awk '$1=="2"{print $0}' $outfile > $tempfile.avg.2
# build the change score
outfile=$outbase"change.txt"
echo "time change" | xe-delimit stdin > $outfile
paste  $tempfile.avg.1  $tempfile.avg.2 | awk '{print $2,$6-$3}' | xe-delimit stdin >> $outfile



################################################################################
# CALCULATE THE THETA POWER TIME-COURSE
# NOTE: smoothing according to longest possible event
################################################################################
echo "	Generating theta power timecourse (1s resolution)..."
outfile=$outbase"trace_power_theta.txt"
# smoothing = longest possible event, converted to an odd number
ssmooth=$(echo $set_max | awk '{ if($1%2!=0) print $1 ; else print $1+1}')
xe-fftpow2 $outbase"trace_aligned.txt" -sf $sample_freq -w $sample_freq -s 1 -t 1 -min 4 -max 12 -o 1 |
	tail -n +1 |
	xe-curvestats2 stdin -min 4 -max 12 -index 6,8 |
	xe-cut1 stdin AUC -o 1 |
	xe-smoothgauss1 stdin $ssmooth > $outfile

################################################################################
# ALIGN THE THETA TIME-COURSE TO EVENT PEAKS
################################################################################
# convert event-samples (200Hz) to event-times (s) offset from zero, rounded to nearest second
cat $tempfile.evt.? | cut -f 2 | xe-math_div1 stdin -cy -1 -v $sample_freq | xe-math_round1 stdin > $tempfile
# align theta power to event-times
outfile=$outbase"theta_average.txt"
xe-align2 $outbase"trace_power_theta.txt" $tempfile -dt -1 -sf 1 -pre 300 -post 300 -norm 0 -nbins 101  > $outfile


################################################################################
# BUILD THE SUMMARY STATISTICS RELATING TO THE EVENTS
# USE TEMP FILES FROM PREVIOUS STEP
################################################################################
echo "	Generating summary statistics for before and after the start-signal..."

stats1=$(xe-cut1 $outbase"events.txt" block,length -o 1 |awk '$1==1{print $2}'|xe-statsd1 stdin)
n1=$(echo $stats1|xe-getkey stdin N)
len1=$(echo $stats1|xe-getkey stdin MEAN)
auc1=$(cut -f 2-3  $tempfile.avg.1 | xe-histstats1 stdin | xe-getkey stdin AUC)
skew1=$(cut -f 3  $tempfile.avg.1 | xe-statsd1 stdin |xe-getkey stdin SKEW)

stats2=$(xe-cut1 $outbase"events.txt" block,length -o 1 |awk '$1==2{print $2}'|xe-statsd1 stdin)
n2=$(echo $stats2|xe-getkey stdin N)
len2=$(echo $stats2|xe-getkey stdin MEAN)
auc2=$(cut -f 2-3  $tempfile.avg.2 | xe-histstats1 stdin | xe-getkey stdin AUC)
skew2=$(cut -f 3  $tempfile.avg.2 | xe-statsd1 stdin |xe-getkey stdin SKEW)

tcom=$(xe-histstats1 $outbase"theta_average.txt" | xe-getkey stdin COM)

outfile=$outbase"summary.txt"
echo "n1 n2 len1 len2 auc1 auc2 skew1 skew2 tCOM" | xe-delimit stdin > $outfile
echo $n1 $n2 $len1 $len2 $auc1 $auc2 $skew1 $skew2 $tcom |
	awk '{printf("%ld,%ld,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",$1,$2,$3,$4,$5,$6,$7,$8,$9)}' |
	xe-delimit stdin >> $outfile


################################################################################
# DATA PLOTS & ADDITIONAL ANALYSIS
################################################################################
if [ $set_plot != "0" ] ; then

	# plot the mean event for the pre and post block
	plotopts="-line 1 -ps 0 -xscale 0.4 -xmin -$set_max -xmax $set_max -xpad 0 -vline 0 "
	plotfile=$outbase"average.ps"
	plotlist=$plotlist" "$plotfile
	xe-plottable1 $outbase"average.txt" $plotopts  -cg 1 -cx 2 -cy 3 -colour -1 -xlabel "Time (sec): $base" -ylabel "Mean event (nA)" -out $plotfile

	# plot the change from pre to post
	plotfile=$outbase"change.ps"
	plotlist=$plotlist" "$plotfile
	xe-plottable1 $outbase"change.txt" $plotopts -colour 2 -xlabel "Time (sec)" -ylabel "Mean change (nA)" -out $plotfile

	# pre-merge the two event plots
	xe-plotmerge1 $plotlist -xmax 2 -xinc 270 -out $tempfile"_plot"
	plotlist=$tempfile"_plot.001.ps"

	if [ $set_plot != "1" ] ; then

		# build an event peak list, converting to minutes
		elist=$(xe-cut1 $outbase"events.txt" peak -o 1 | xe-math_div1 stdin -v 60 | tr '\n' ',' | xe-delimitkiller stdin)

		# set the plot options
		plotopts="-line 1 -ps 0 -xmin $preminutes -xmax $postminutes -xscale 1 -xpad 0 -colour 1 -vline $elist"

		# plot the binned raw signal showing detected events and the start time
		echo "	plotting binned raw trace + events"
		plotfile=$outbase"trace_aligned.ps"
		plotlist=$plotlist" "$plotfile
		cat $outbase"trace_aligned.txt" |
			xe-bin1 stdin $sample_freq |
			xe-timestamp1 stdin -sf 60 -o $preminutes |
			xe-plottable1 stdin $plotopts -xlabel "Time (min)" -ylabel "Current (nA)" -out $plotfile

		# plot the filtered signal showing detected events and the start time
		if [ $set_z == "0" ] ; then z="nA" ; else z="Z-score" ; fi
		echo "	plotting filtered data"
		plotfile=$outbase"trace_filtered.ps"
		plotlist=$plotlist" "$plotfile
		cat $outbase"trace_filtered.txt" |
			xe-bin1 stdin $sample_freq |
			xe-timestamp1 stdin -sf 60 -o $preminutes |
			xe-plottable1 stdin $plotopts -hline "$set_thresh" -xlabel "Time (min)" -ylabel "Current ("$z")" -out $plotfile

		# Plot the theta amplitude time-course (no need for binning - FFT output is 1Hz)
		echo "	plotting theta amplitude"
		plotfile=$outbase"trace_power_theta.ps"
		plotlist=$plotlist" "$plotfile
		cut -f 2 $outbase"trace_power_theta.txt" |
			xe-timestamp1 stdin -sf 60 -o $preminutes |
			xe-plottable1 stdin $plotopts -colour 3 -xlabel "Time (min)" -ylabel "Theta Amplitude (nA)" -out $plotfile

		# plot the theta timecourse aligned to event peaks
		plotopts="-line 1 -ps 0 -xscale 0.4 -xpad 0 -vline 0 -colour 3"
		plotfile=$outbase"average_theta.ps"
		plotlist=$plotlist" "$plotfile
		cat $outbase"theta_average.txt" |
			xe-plottable1 stdin $plotopts -xlabel "Event time (s)" -ylabel "Theta Amplitude (uA)" -out $plotfile

	fi

	xe-plotmerge1 $plotlist -xmax 1 -ymax 4 -xinc 225 -out $outbase"summary"
fi

echo "Done"
echo

#rm -f $tempfile"*"
exit
