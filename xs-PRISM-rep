#!/bin/bash

# <TAGS>PRISM transform</TAGS>

################################################################################
# INTIAL VARIABLE DEFINITIONS
################################################################################
allopts=$@
thisprog=`basename "$0"`
tempfile="temp_"$thisprog #"_"$$
progpath=$(dirname $(readlink -f "$0"))
startdir=$(pwd)
start_time=$(date +'%s.%3N')
RED='\033[0;31m'	# for errors
PURPLE='\033[0;35m'	# for warnings
GREEN='\033[0;32m'	# for interactive text requiring input
NC='\033[0m' 		# to revert to default text colour

z=${thisprog%%.*}
setoutbase="out_"$z".txt"
setplotbase="plot_"$z

setverb="0"
setclean="1"
setfilegnames=""
sethead="0"


################################################################################
# PRINT INSTRUCTIONS IF NO ARGUMENTS ARE GIVEN
################################################################################
if [ $# -lt 1 ]; then
	echo
	echo "--------------------------------------------------------------------------------"
	echo $thisprog": convert data-fame to GraphPad-Prism repeated-measures format"
	echo "- a block of columns is generated for each group, with a group-header added"
	echo "- that is..."
	echo "    - results from a given subject are laid out on a single line"
	echo "    - a header is added for each treatment "
	echo "    - a sub-header is added for each subject-within-treatment"
 	echo "- NOTE! assumes each subject has an entry for each condition"
	echo "- NOTE! header-rows must be removed - use the --head option"
	echo ""
	echo "USAGE: $thisprog [in] [options]"
	echo "    [in]: a 3- or 4-column input file (automatically detected)"
	echo "        - 3-column files: subject  group  data"
	echo "        - 4-column files: subject  group  time  data"
	echo "        - all columns must be numeric (no letters or non-numeric characters)"
	echo "VALID OPTIONS (defaults in []):"
	echo "    --head: number of header lines to skip [$sethead]"
	echo "    --names: file defining \"group\" and \"name\" to replace group-number [$setfilegnames]"
	echo ""
	echo "EXAMPLE: "
	echo -e "    cut -f 1-4 data.txt > new.txt \n    $thisprog new.txt --head 1"
	echo ""
	echo "OUTPUT: group-header, subject-header, and data-row"
	echo "    - for 4-column input, one data-row per \"time\" in column-3"
	echo "    - example for subjects 10,11,12, groups 1,2, and times 1.0,1.5,2.0..."
	echo ""
	echo "    treatment     group1   group1   group1   group2   group2   group2"
	echo "    subject       10       11       12       10       11       12"
	echo "    1.0           166.8    173.0    438.8    361.3    180.9    184.4"
	echo "    1.5           374.7    289.6    174.2    91.8     153.6    191.3"
	echo "    2.0           178.1    283.0    547.3    303.4    236.8    438.8"
	echo "--------------------------------------------------------------------------------"
	echo
	exit
fi


########################################################################################
# ARGUMENT HANDLING
########################################################################################
infile=$1 ; shift
# check file exists & isn't empty
if [ ! -e "$infile" ] ; then { echo -e "\n--- Error ["$thisprog"]: missing file $infile\n" >&2 ;  exit; } ; fi
if [ ! -s "$infile" ] ; then { echo -e "\n--- Error ["$thisprog"]: $infile is empty\n" >&2 ;  exit; } ; fi

vs="v:c:" ; vl="verb:,clean:,head:,names:"
y=$(getopt -o $vs -l $vl -n "" -- "$@" 2>&1 > /dev/null)
if [ "$y" != "" ] ; then { echo -e "\n--- Error ["$thisprog"]"$y"\n" >&2 ; exit ; }
else eval set -- $(getopt -o $vs -l $vl -n "" -- "$@") ; fi
while [ $# -gt 0 ] ; do
	case $1 in
		-v | --verb ) setverb=$2 ; shift ;;
		-c | --clean ) setclean=$2 ; shift ;;
		--head ) sethead=$2 ; shift ;;
		--names ) setfilegnames=$2 ; shift ;;
		-- ) shift ; break ;;
		* ) ;;
	esac
	shift
done
if [ "$setverb" != "0" ] && [ "$setverb" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --verb ($setverb) -  must be 0 or 1\n" >&2 ;  exit; } ; fi
if [ "$setclean" != "0" ] && [ "$setclean" != "1" ] ; then { echo -e "\n--- Error ["$thisprog"]: invalid --clean ($setclean) -  must be 0 or 1\n" >&2 ;  exit; } ; fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi

########################################################################################
# MAKE SURE GROUPNAME FILE IS PRESENT AND NOT EMPTY
########################################################################################
if [ "$setfilegnames" != "" ] ; then
	if [ ! -e "$setfilegnames" ] ; then { echo -e "\n--- Error ["$thisprog"]: missing file $setfilegnames\n" >&2 ;  exit; } ; fi
	if [ ! -s "$setfilegnames" ] ; then { echo -e "\n--- Error ["$thisprog"]: $setfilegnames is empty\n" >&2 ;  exit; } ; fi
fi

################################################################################
# DETERMINE NUMBER OF COLUMNS
################################################################################
let z=$(echo $sethead | awk '{print $1+1}')
ncols=$(tail -n "+$z" $infile | head -n 1 | wc -w)

################################################################################
# MAKE TEMP-FILE, ADDING FAKE "TIME" COLUMN IF REQUIRED
################################################################################
if [ $ncols -eq 4 ] ; then
 	tail -n "+$z" $infile > $tempfile".1"
elif [ $ncols -eq 3 ] ; then
	tail -n "+$z" $infile |
	awk 'BEGIN{OFS="\t"}{print $1,$2,"1",$3}'> $tempfile".1"
else
 	echo -e "\n--- Error ["$thisprog"]: input $infile has $ncols columns - must be 3 or 4\n" >&2
	exit
fi

################################################################################
# BUILD THE SUBJECT-LIST AND GROUP-LIST
################################################################################
let z=$(echo $sethead | awk '{print $1+1}')
listsubjects=$(cut -f 1 $tempfile".1" | sort -nu)
listgroups=$(cut -f 2 $tempfile".1" | sort -nu)
listtimes=$(cut -f 3 $tempfile".1" | sort -nu)

################################################################################
# RUN REPEATED_MEASURES INTEGRITY-CHECK
################################################################################
xe-checkreplicate1 $tempfile".1" -head 0 -cg1 1 -cg2 2 -cg3 3 -cy 4 2> $tempfile".error"
if [ -s $tempfile".error" ] ; then cat $tempfile".error" | sed "s/xe-checkreplicate1/$thisprog/g" >&2 ; exit ; fi

################################################################################
# TRANSPOSE THE DATA SO THAT SUBJECTS APPEAR ON A SINGLE LINE (SUBJECT=REPEATED MEASURE)
################################################################################
xe-transpose4 $tempfile".1" -cg1 3 -cg2 2 -cg3 1 -cy 4 -m "NAN"> $tempfile".2"

################################################################################
# BUILD THE SUBJECT-HEADER
# this will go on the second row of each teporary treatment file
################################################################################
head2=$(head -n 1 $tempfile".2" | cut -f 3- | sed 's/r_/subject_/g')

################################################################################
# MAKE A TEMPORARY FILE FOR EACH TREATMENT GROUP
# - build the treatment-header and attach it and the subject-header to each file
# - both header lines to be prefixed with a label - treatment and subject
################################################################################
list1=""
let count=0
for group in $listgroups ; do
	let count=$count+1
	out1=$tempfile"_grp"$group
	list1=$list1" "$out1
	# if name-file is defined, use it to define the name for the current group
	if [ "$setfilegnames" != "" ] ; then
		name=$(xe-dbmatch1 $setfilegnames "group" $group -oc "name" -o 1)
		if [ "$name" == "" ] ; then { echo -e "\n--- Error ["$thisprog"]: no group $group defined in $setfilegnames\n" >&2 ;  exit; } ; fi
	# if no name-file is defined, build a fake list of groupnames
	else name="group:"$group ; fi

	# build header for this group and output
	head1="" ; for i in $head2 ; do head1=$head1" "$name ; done

	if [ $count -eq 1 ] ; then
		# add the header-lines to the temporary treatment file
		echo "treatment "$head1 | xe-delimit stdin > $out1
		echo "subject "$head2 | xe-delimit stdin >> $out1
		# append the data for this group - remove the original header and grp column
		xe-dbmatch1 $tempfile".2" grp $group -m 3 |
		tail -n +2 |
		cut -f 1,3- >> $out1
	else
		echo $head1 | xe-delimit stdin > $out1
		echo $head2 | xe-delimit stdin >> $out1
		# append the data for this group - remove the original header and subj (actually time) & grp columns
		xe-dbmatch1 $tempfile".2" grp $group -m 3 |
		tail -n +2 |
		cut -f 3- >> $out1
	fi

done
# PASTE THE TEMPORARY FILES TOGETHER TO MAKE THE FINAL OUTPUT
paste $list1


################################################################################
# REPORT, CLEANUP AND EXIT
################################################################################
if [ "$setverb" == "1" ] ; then
	end_time=$(date +'%s.%3N')
	s=$(echo $end_time $start_time | awk '{print $1-$2}' )
	m=$(echo $s | awk '{print ($1/60)}')
	echo "	Time to finish job: "$s" seconds = "$m" minutes"
fi
if [ "$setclean" == "1" ] ; then
	if [ "$tempfile" != "" ] ; then rm -f $tempfile* ; fi
fi
exit
